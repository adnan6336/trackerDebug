
trackerDebug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005584  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800563c  0800563c  0001563c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c4  080056c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080056c4  080056c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056c4  080056c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  2000000c  080056d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  080056d8  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136e3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002507  00000000  00000000  00033717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00035c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00036c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c7f  00000000  00000000  00037bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012faf  00000000  00000000  0004d847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb74  00000000  00000000  000607f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed36a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b1c  00000000  00000000  000ed3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005624 	.word	0x08005624

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005624 	.word	0x08005624

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 ff44 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f860 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 faee 	bl	80009d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80003fc:	f000 face 	bl	800099c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000400:	f000 f9c8 	bl	8000794 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000404:	f000 fa14 	bl	8000830 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 8000408:	f000 fa94 	bl	8000934 <MX_USART4_UART_Init>
  MX_TIM16_Init();
 800040c:	f000 f970 	bl	80006f0 <MX_TIM16_Init>
  MX_SPI1_Init();
 8000410:	f000 f8ac 	bl	800056c <MX_SPI1_Init>
  MX_TIM3_Init();
 8000414:	f000 f8e8 	bl	80005e8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000418:	f000 fa58 	bl	80008cc <MX_USART3_UART_Init>
  MX_TIM14_Init();
 800041c:	f000 f942 	bl	80006a4 <MX_TIM14_Init>
  MX_TIM17_Init();
 8000420:	f000 f990 	bl	8000744 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */


//W25qxx_Init();

HAL_UART_Receive_IT(&huart1, buf1, 1);
 8000424:	491c      	ldr	r1, [pc, #112]	; (8000498 <main+0xac>)
 8000426:	4b1d      	ldr	r3, [pc, #116]	; (800049c <main+0xb0>)
 8000428:	2201      	movs	r2, #1
 800042a:	0018      	movs	r0, r3
 800042c:	f003 fa66 	bl	80038fc <HAL_UART_Receive_IT>
HAL_UART_Receive_IT(&huart2, buf2, 1);
 8000430:	491b      	ldr	r1, [pc, #108]	; (80004a0 <main+0xb4>)
 8000432:	4b1c      	ldr	r3, [pc, #112]	; (80004a4 <main+0xb8>)
 8000434:	2201      	movs	r2, #1
 8000436:	0018      	movs	r0, r3
 8000438:	f003 fa60 	bl	80038fc <HAL_UART_Receive_IT>
HAL_UART_Receive_IT(&huart4, buf3, 1);
 800043c:	491a      	ldr	r1, [pc, #104]	; (80004a8 <main+0xbc>)
 800043e:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <main+0xc0>)
 8000440:	2201      	movs	r2, #1
 8000442:	0018      	movs	r0, r3
 8000444:	f003 fa5a 	bl	80038fc <HAL_UART_Receive_IT>


// TOGGLE BLUE LED------------------------------------
HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 1);
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <main+0xc4>)
 800044a:	2201      	movs	r2, #1
 800044c:	2104      	movs	r1, #4
 800044e:	0018      	movs	r0, r3
 8000450:	f001 fc58 	bl	8001d04 <HAL_GPIO_WritePin>
HAL_Delay(1000);
 8000454:	23fa      	movs	r3, #250	; 0xfa
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	0018      	movs	r0, r3
 800045a:	f000 ff95 	bl	8001388 <HAL_Delay>
HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, 0);
 800045e:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <main+0xc4>)
 8000460:	2200      	movs	r2, #0
 8000462:	2104      	movs	r1, #4
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fc4d 	bl	8001d04 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <main+0xc4>)
 800046c:	2201      	movs	r2, #1
 800046e:	2102      	movs	r1, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fc47 	bl	8001d04 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 8000476:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <main+0xc8>)
 8000478:	0018      	movs	r0, r3
 800047a:	f000 ff85 	bl	8001388 <HAL_Delay>
	  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <main+0xc4>)
 8000480:	2200      	movs	r2, #0
 8000482:	2102      	movs	r1, #2
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fc3d 	bl	8001d04 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800048a:	23fa      	movs	r3, #250	; 0xfa
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	0018      	movs	r0, r3
 8000490:	f000 ff7a 	bl	8001388 <HAL_Delay>
	  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 8000494:	e7e9      	b.n	800046a <main+0x7e>
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	20000028 	.word	0x20000028
 800049c:	20000224 	.word	0x20000224
 80004a0:	2000002c 	.word	0x2000002c
 80004a4:	200002b8 	.word	0x200002b8
 80004a8:	20000030 	.word	0x20000030
 80004ac:	200003e0 	.word	0x200003e0
 80004b0:	50000400 	.word	0x50000400
 80004b4:	00001388 	.word	0x00001388

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b093      	sub	sp, #76	; 0x4c
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	2414      	movs	r4, #20
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	0018      	movs	r0, r3
 80004c4:	2334      	movs	r3, #52	; 0x34
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f005 f8a3 	bl	8005614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	0018      	movs	r0, r3
 80004d2:	2310      	movs	r3, #16
 80004d4:	001a      	movs	r2, r3
 80004d6:	2100      	movs	r1, #0
 80004d8:	f005 f89c 	bl	8005614 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 fc47 	bl	8001d74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2202      	movs	r2, #2
 80004ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	0052      	lsls	r2, r2, #1
 80004f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004f4:	0021      	movs	r1, r4
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2240      	movs	r2, #64	; 0x40
 8000500:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2202      	movs	r2, #2
 8000506:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2202      	movs	r2, #2
 800050c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2200      	movs	r2, #0
 8000512:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2208      	movs	r2, #8
 8000518:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	0292      	lsls	r2, r2, #10
 8000520:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	0592      	lsls	r2, r2, #22
 8000528:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052a:	187b      	adds	r3, r7, r1
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fc6d 	bl	8001e0c <HAL_RCC_OscConfig>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000536:	f000 fb25 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2207      	movs	r2, #7
 800053e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2202      	movs	r2, #2
 8000544:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2102      	movs	r1, #2
 8000556:	0018      	movs	r0, r3
 8000558:	f001 ff68 	bl	800242c <HAL_RCC_ClockConfig>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000560:	f000 fb10 	bl	8000b84 <Error_Handler>
  }
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b013      	add	sp, #76	; 0x4c
 800056a:	bd90      	pop	{r4, r7, pc}

0800056c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_SPI1_Init+0x74>)
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_SPI1_Init+0x78>)
 8000574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <MX_SPI1_Init+0x74>)
 8000578:	2282      	movs	r2, #130	; 0x82
 800057a:	0052      	lsls	r2, r2, #1
 800057c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_SPI1_Init+0x74>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <MX_SPI1_Init+0x74>)
 8000586:	22e0      	movs	r2, #224	; 0xe0
 8000588:	00d2      	lsls	r2, r2, #3
 800058a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_SPI1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <MX_SPI1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_SPI1_Init+0x74>)
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_SPI1_Init+0x74>)
 80005a2:	2218      	movs	r2, #24
 80005a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_SPI1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_SPI1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <MX_SPI1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_SPI1_Init+0x74>)
 80005ba:	2207      	movs	r2, #7
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_SPI1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_SPI1_Init+0x74>)
 80005c6:	2208      	movs	r2, #8
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MX_SPI1_Init+0x74>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f002 fa0b 	bl	80029e8 <HAL_SPI_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005d6:	f000 fad5 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000034 	.word	0x20000034
 80005e4:	40013000 	.word	0x40013000

080005e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ee:	2314      	movs	r3, #20
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	0018      	movs	r0, r3
 80005f4:	230c      	movs	r3, #12
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f005 f80b 	bl	8005614 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	0018      	movs	r0, r3
 8000602:	2310      	movs	r3, #16
 8000604:	001a      	movs	r2, r3
 8000606:	2100      	movs	r1, #0
 8000608:	f005 f804 	bl	8005614 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_TIM3_Init+0xb0>)
 800060e:	4a23      	ldr	r2, [pc, #140]	; (800069c <MX_TIM3_Init+0xb4>)
 8000610:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 640;
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_TIM3_Init+0xb0>)
 8000614:	22a0      	movs	r2, #160	; 0xa0
 8000616:	0092      	lsls	r2, r2, #2
 8000618:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_TIM3_Init+0xb0>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_TIM3_Init+0xb0>)
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <MX_TIM3_Init+0xb8>)
 8000624:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_TIM3_Init+0xb0>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_TIM3_Init+0xb0>)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_TIM3_Init+0xb0>)
 8000634:	0018      	movs	r0, r3
 8000636:	f002 fc03 	bl	8002e40 <HAL_TIM_IC_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800063e:	f000 faa1 	bl	8000b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000642:	2114      	movs	r1, #20
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000650:	187a      	adds	r2, r7, r1
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_TIM3_Init+0xb0>)
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f002 ffde 	bl	8003618 <HAL_TIMEx_MasterConfigSynchronization>
 800065c:	1e03      	subs	r3, r0, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000660:	f000 fa90 	bl	8000b84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	220a      	movs	r2, #10
 8000668:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2201      	movs	r2, #1
 800066e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800067c:	1d39      	adds	r1, r7, #4
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_TIM3_Init+0xb0>)
 8000680:	2200      	movs	r2, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f002 fd66 	bl	8003154 <HAL_TIM_IC_ConfigChannel>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 800068c:	f000 fa7a 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b008      	add	sp, #32
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000098 	.word	0x20000098
 800069c:	40000400 	.word	0x40000400
 80006a0:	0000ffff 	.word	0x0000ffff

080006a4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_TIM14_Init+0x44>)
 80006aa:	4a10      	ldr	r2, [pc, #64]	; (80006ec <MX_TIM14_Init+0x48>)
 80006ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 6400;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_TIM14_Init+0x44>)
 80006b0:	22c8      	movs	r2, #200	; 0xc8
 80006b2:	0152      	lsls	r2, r2, #5
 80006b4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_TIM14_Init+0x44>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_TIM14_Init+0x44>)
 80006be:	22fa      	movs	r2, #250	; 0xfa
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_TIM14_Init+0x44>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_TIM14_Init+0x44>)
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_TIM14_Init+0x44>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 fb5c 	bl	8002d90 <HAL_TIM_Base_Init>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80006dc:	f000 fa52 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	200000e4 	.word	0x200000e4
 80006ec:	40002000 	.word	0x40002000

080006f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006f4:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_TIM16_Init+0x48>)
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <MX_TIM16_Init+0x4c>)
 80006f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6400;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_TIM16_Init+0x48>)
 80006fc:	22c8      	movs	r2, #200	; 0xc8
 80006fe:	0152      	lsls	r2, r2, #5
 8000700:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_TIM16_Init+0x48>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_TIM16_Init+0x48>)
 800070a:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <MX_TIM16_Init+0x50>)
 800070c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_TIM16_Init+0x48>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_TIM16_Init+0x48>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_TIM16_Init+0x48>)
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <MX_TIM16_Init+0x48>)
 8000722:	0018      	movs	r0, r3
 8000724:	f002 fb34 	bl	8002d90 <HAL_TIM_Base_Init>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800072c:	f000 fa2a 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	20000130 	.word	0x20000130
 800073c:	40014400 	.word	0x40014400
 8000740:	000003e7 	.word	0x000003e7

08000744 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_TIM17_Init+0x48>)
 800074a:	4a11      	ldr	r2, [pc, #68]	; (8000790 <MX_TIM17_Init+0x4c>)
 800074c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6400;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_TIM17_Init+0x48>)
 8000750:	22c8      	movs	r2, #200	; 0xc8
 8000752:	0152      	lsls	r2, r2, #5
 8000754:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_TIM17_Init+0x48>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_TIM17_Init+0x48>)
 800075e:	22fa      	movs	r2, #250	; 0xfa
 8000760:	0092      	lsls	r2, r2, #2
 8000762:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_TIM17_Init+0x48>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_TIM17_Init+0x48>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_TIM17_Init+0x48>)
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <MX_TIM17_Init+0x48>)
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fb09 	bl	8002d90 <HAL_TIM_Base_Init>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8000782:	f000 f9ff 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000017c 	.word	0x2000017c
 8000790:	40014800 	.word	0x40014800

08000794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <MX_USART1_UART_Init+0x94>)
 800079a:	4a24      	ldr	r2, [pc, #144]	; (800082c <MX_USART1_UART_Init+0x98>)
 800079c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007a0:	2296      	movs	r2, #150	; 0x96
 80007a2:	0192      	lsls	r2, r2, #6
 80007a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f002 ff9a 	bl	8003718 <HAL_UART_Init>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007e8:	f000 f9cc 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART1_UART_Init+0x94>)
 80007ee:	2100      	movs	r1, #0
 80007f0:	0018      	movs	r0, r3
 80007f2:	f004 fe0b 	bl	800540c <HAL_UARTEx_SetTxFifoThreshold>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007fa:	f000 f9c3 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_USART1_UART_Init+0x94>)
 8000800:	2100      	movs	r1, #0
 8000802:	0018      	movs	r0, r3
 8000804:	f004 fe42 	bl	800548c <HAL_UARTEx_SetRxFifoThreshold>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800080c:	f000 f9ba 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <MX_USART1_UART_Init+0x94>)
 8000812:	0018      	movs	r0, r3
 8000814:	f004 fdc0 	bl	8005398 <HAL_UARTEx_DisableFifoMode>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800081c:	f000 f9b2 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	20000224 	.word	0x20000224
 800082c:	40013800 	.word	0x40013800

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 8000836:	4a24      	ldr	r2, [pc, #144]	; (80008c8 <MX_USART2_UART_Init+0x98>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 800083c:	22e1      	movs	r2, #225	; 0xe1
 800083e:	0252      	lsls	r2, r2, #9
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 800087a:	0018      	movs	r0, r3
 800087c:	f002 ff4c 	bl	8003718 <HAL_UART_Init>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000884:	f000 f97e 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 800088a:	2100      	movs	r1, #0
 800088c:	0018      	movs	r0, r3
 800088e:	f004 fdbd 	bl	800540c <HAL_UARTEx_SetTxFifoThreshold>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000896:	f000 f975 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 800089c:	2100      	movs	r1, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f004 fdf4 	bl	800548c <HAL_UARTEx_SetRxFifoThreshold>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008a8:	f000 f96c 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <MX_USART2_UART_Init+0x94>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f004 fd72 	bl	8005398 <HAL_UARTEx_DisableFifoMode>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008b8:	f000 f964 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	200002b8 	.word	0x200002b8
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_USART3_UART_Init+0x60>)
 80008d2:	4a17      	ldr	r2, [pc, #92]	; (8000930 <MX_USART3_UART_Init+0x64>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_USART3_UART_Init+0x60>)
 80008d8:	22e1      	movs	r2, #225	; 0xe1
 80008da:	0252      	lsls	r2, r2, #9
 80008dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_USART3_UART_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_USART3_UART_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_USART3_UART_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_USART3_UART_Init+0x60>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_USART3_UART_Init+0x60>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_USART3_UART_Init+0x60>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_USART3_UART_Init+0x60>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_USART3_UART_Init+0x60>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_USART3_UART_Init+0x60>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <MX_USART3_UART_Init+0x60>)
 8000916:	0018      	movs	r0, r3
 8000918:	f002 fefe 	bl	8003718 <HAL_UART_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000920:	f000 f930 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	2000034c 	.word	0x2000034c
 8000930:	40004800 	.word	0x40004800

08000934 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_USART4_UART_Init+0x60>)
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <MX_USART4_UART_Init+0x64>)
 800093c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_USART4_UART_Init+0x60>)
 8000940:	2296      	movs	r2, #150	; 0x96
 8000942:	0192      	lsls	r2, r2, #6
 8000944:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_USART4_UART_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART4_UART_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_USART4_UART_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART4_UART_Init+0x60>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <MX_USART4_UART_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART4_UART_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <MX_USART4_UART_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART4_UART_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <MX_USART4_UART_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <MX_USART4_UART_Init+0x60>)
 800097e:	0018      	movs	r0, r3
 8000980:	f002 feca 	bl	8003718 <HAL_UART_Init>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f8fc 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	200003e0 	.word	0x200003e0
 8000998:	40004c00 	.word	0x40004c00

0800099c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_DMA_Init+0x38>)
 80009a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_DMA_Init+0x38>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_DMA_Init+0x38>)
 80009b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2009      	movs	r0, #9
 80009c0:	f000 fdb2 	bl	8001528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009c4:	2009      	movs	r0, #9
 80009c6:	f000 fdc4 	bl	8001552 <HAL_NVIC_EnableIRQ>

}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b002      	add	sp, #8
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	40021000 	.word	0x40021000

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b08b      	sub	sp, #44	; 0x2c
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	2414      	movs	r4, #20
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	0018      	movs	r0, r3
 80009e4:	2314      	movs	r3, #20
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f004 fe13 	bl	8005614 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	4b43      	ldr	r3, [pc, #268]	; (8000afc <MX_GPIO_Init+0x124>)
 80009f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009f2:	4b42      	ldr	r3, [pc, #264]	; (8000afc <MX_GPIO_Init+0x124>)
 80009f4:	2120      	movs	r1, #32
 80009f6:	430a      	orrs	r2, r1
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
 80009fa:	4b40      	ldr	r3, [pc, #256]	; (8000afc <MX_GPIO_Init+0x124>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fe:	2220      	movs	r2, #32
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b3d      	ldr	r3, [pc, #244]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	635a      	str	r2, [r3, #52]	; 0x34
 8000a12:	4b3a      	ldr	r3, [pc, #232]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a16:	2201      	movs	r2, #1
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	4b37      	ldr	r3, [pc, #220]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a22:	4b36      	ldr	r3, [pc, #216]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a24:	2102      	movs	r1, #2
 8000a26:	430a      	orrs	r2, r1
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2a:	4b34      	ldr	r3, [pc, #208]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2e:	2202      	movs	r2, #2
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b31      	ldr	r3, [pc, #196]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3a:	4b30      	ldr	r3, [pc, #192]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
 8000a42:	4b2e      	ldr	r3, [pc, #184]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a46:	2204      	movs	r2, #4
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a54:	2108      	movs	r1, #8
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_GPIO_Init+0x124>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5e:	2208      	movs	r2, #8
 8000a60:	4013      	ands	r3, r2
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_Pin|LED_2_Pin|LED_1_Pin|PWR_KEY_Pin, GPIO_PIN_RESET);
 8000a66:	4926      	ldr	r1, [pc, #152]	; (8000b00 <MX_GPIO_Init+0x128>)
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <MX_GPIO_Init+0x12c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f001 f949 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_CTRL_GPIO_Port, G_CTRL_Pin, GPIO_PIN_SET);
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_GPIO_Init+0x130>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	2102      	movs	r1, #2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f001 f943 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000a7e:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_GPIO_Init+0x130>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	2108      	movs	r1, #8
 8000a84:	0018      	movs	r0, r3
 8000a86:	f001 f93d 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RELAY_Pin LED_2_Pin LED_1_Pin PWR_KEY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin|LED_2_Pin|LED_1_Pin|PWR_KEY_Pin;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <MX_GPIO_Init+0x128>)
 8000a8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2201      	movs	r2, #1
 8000a94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <MX_GPIO_Init+0x12c>)
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	f000 ffc7 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_Pin */
  GPIO_InitStruct.Pin = INPUT_Pin;
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_GPIO_Init+0x134>)
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0010      	movs	r0, r2
 8000ac8:	f000 ffb8 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : G_CTRL_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = G_CTRL_Pin|FLASH_CS_Pin;
 8000acc:	0021      	movs	r1, r4
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <MX_GPIO_Init+0x130>)
 8000aea:	0019      	movs	r1, r3
 8000aec:	0010      	movs	r0, r2
 8000aee:	f000 ffa5 	bl	8001a3c <HAL_GPIO_Init>

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b00b      	add	sp, #44	; 0x2c
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40021000 	.word	0x40021000
 8000b00:	00003006 	.word	0x00003006
 8000b04:	50000400 	.word	0x50000400
 8000b08:	50000c00 	.word	0x50000c00
 8000b0c:	50000800 	.word	0x50000800

08000b10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

	if(huart == &huart1){
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_RxCpltCallback+0x60>)
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d113      	bne.n	8000b48 <HAL_UART_RxCpltCallback+0x38>
		//AT RECV
		//----------TOGGLE RED LED--------------------------
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	015b      	lsls	r3, r3, #5
 8000b24:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <HAL_UART_RxCpltCallback+0x64>)
 8000b26:	0019      	movs	r1, r3
 8000b28:	0010      	movs	r0, r2
 8000b2a:	f001 f908 	bl	8001d3e <HAL_GPIO_TogglePin>
//
//		cnnt++;
//		if(cnnt>0xfffa){
//			cnnt = 0;
//		}
		HAL_UART_Receive_IT(&huart1, buf1, 1);
 8000b2e:	4912      	ldr	r1, [pc, #72]	; (8000b78 <HAL_UART_RxCpltCallback+0x68>)
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_UART_RxCpltCallback+0x60>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	0018      	movs	r0, r3
 8000b36:	f002 fee1 	bl	80038fc <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart4, buf1, 1, 100);
 8000b3a:	490f      	ldr	r1, [pc, #60]	; (8000b78 <HAL_UART_RxCpltCallback+0x68>)
 8000b3c:	480f      	ldr	r0, [pc, #60]	; (8000b7c <HAL_UART_RxCpltCallback+0x6c>)
 8000b3e:	2364      	movs	r3, #100	; 0x64
 8000b40:	2201      	movs	r2, #1
 8000b42:	f002 fe3f 	bl	80037c4 <HAL_UART_Transmit>
	else if(huart == &huart4){
		//DEBUG
		HAL_UART_Receive_IT(&huart4, buf3, 1);
		HAL_UART_Transmit(&huart1, buf3, 1, 100);
	}
}
 8000b46:	e00f      	b.n	8000b68 <HAL_UART_RxCpltCallback+0x58>
	else if(huart == &huart4){
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_UART_RxCpltCallback+0x6c>)
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d10b      	bne.n	8000b68 <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Receive_IT(&huart4, buf3, 1);
 8000b50:	490b      	ldr	r1, [pc, #44]	; (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b52:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_UART_RxCpltCallback+0x6c>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 fed0 	bl	80038fc <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart1, buf3, 1, 100);
 8000b5c:	4908      	ldr	r1, [pc, #32]	; (8000b80 <HAL_UART_RxCpltCallback+0x70>)
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <HAL_UART_RxCpltCallback+0x60>)
 8000b60:	2364      	movs	r3, #100	; 0x64
 8000b62:	2201      	movs	r2, #1
 8000b64:	f002 fe2e 	bl	80037c4 <HAL_UART_Transmit>
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000224 	.word	0x20000224
 8000b74:	50000400 	.word	0x50000400
 8000b78:	20000028 	.word	0x20000028
 8000b7c:	200003e0 	.word	0x200003e0
 8000b80:	20000030 	.word	0x20000030

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	0549      	lsls	r1, r1, #21
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	055b      	lsls	r3, r3, #21
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b08b      	sub	sp, #44	; 0x2c
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	2414      	movs	r4, #20
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	0018      	movs	r0, r3
 8000be6:	2314      	movs	r3, #20
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f004 fd12 	bl	8005614 <memset>
  if(hspi->Instance==SPI1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_SPI_MspInit+0x9c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d137      	bne.n	8000c6a <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_SPI_MspInit+0xa0>)
 8000bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <HAL_SPI_MspInit+0xa0>)
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	0149      	lsls	r1, r1, #5
 8000c04:	430a      	orrs	r2, r1
 8000c06:	641a      	str	r2, [r3, #64]	; 0x40
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <HAL_SPI_MspInit+0xa0>)
 8000c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	015b      	lsls	r3, r3, #5
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0xa0>)
 8000c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_SPI_MspInit+0xa0>)
 8000c1c:	2102      	movs	r1, #2
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_SPI_MspInit+0xa0>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	2202      	movs	r2, #2
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000c2e:	0021      	movs	r1, r4
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2238      	movs	r2, #56	; 0x38
 8000c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2202      	movs	r2, #2
 8000c3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_SPI_MspInit+0xa4>)
 8000c52:	0019      	movs	r1, r3
 8000c54:	0010      	movs	r0, r2
 8000c56:	f000 fef1 	bl	8001a3c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2103      	movs	r1, #3
 8000c5e:	2019      	movs	r0, #25
 8000c60:	f000 fc62 	bl	8001528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c64:	2019      	movs	r0, #25
 8000c66:	f000 fc74 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b00b      	add	sp, #44	; 0x2c
 8000c70:	bd90      	pop	{r4, r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	50000400 	.word	0x50000400

08000c80 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b08b      	sub	sp, #44	; 0x2c
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	2414      	movs	r4, #20
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	2314      	movs	r3, #20
 8000c90:	001a      	movs	r2, r3
 8000c92:	2100      	movs	r1, #0
 8000c94:	f004 fcbe 	bl	8005614 <memset>
  if(htim_ic->Instance==TIM3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a34      	ldr	r2, [pc, #208]	; (8000d70 <HAL_TIM_IC_MspInit+0xf0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d161      	bne.n	8000d66 <HAL_TIM_IC_MspInit+0xe6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <HAL_TIM_IC_MspInit+0xf4>)
 8000ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <HAL_TIM_IC_MspInit+0xf4>)
 8000ca8:	2102      	movs	r1, #2
 8000caa:	430a      	orrs	r2, r1
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <HAL_TIM_IC_MspInit+0xf4>)
 8000cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <HAL_TIM_IC_MspInit+0xf4>)
 8000cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <HAL_TIM_IC_MspInit+0xf4>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <HAL_TIM_IC_MspInit+0xf4>)
 8000cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RI_Pin;
 8000cd2:	0021      	movs	r1, r4
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2240      	movs	r2, #64	; 0x40
 8000cd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2202      	movs	r2, #2
 8000cde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2201      	movs	r2, #1
 8000cf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RI_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	187a      	adds	r2, r7, r1
 8000cf4:	23a0      	movs	r3, #160	; 0xa0
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fe9e 	bl	8001a3c <HAL_GPIO_Init>

    /* TIM3 DMA Init */
    /* TIM3_CH1 Init */
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d02:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <HAL_TIM_IC_MspInit+0xfc>)
 8000d04:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d08:	2220      	movs	r2, #32
 8000d0a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	0052      	lsls	r2, r2, #1
 8000d24:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	00d2      	lsls	r2, r2, #3
 8000d2c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_CIRCULAR;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d30:	2220      	movs	r2, #32
 8000d32:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 fc25 	bl	800158c <HAL_DMA_Init>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_TIM_IC_MspInit+0xca>
    {
      Error_Handler();
 8000d46:	f7ff ff1d 	bl	8000b84 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_TIM_IC_MspInit+0xf8>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f000 fbe4 	bl	8001528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d60:	2010      	movs	r0, #16
 8000d62:	f000 fbf6 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b00b      	add	sp, #44	; 0x2c
 8000d6c:	bd90      	pop	{r4, r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40000400 	.word	0x40000400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	200001c8 	.word	0x200001c8
 8000d7c:	40020008 	.word	0x40020008

08000d80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <HAL_TIM_Base_MspInit+0xb8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d116      	bne.n	8000dc0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_TIM_Base_MspInit+0xbc>)
 8000d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_TIM_Base_MspInit+0xbc>)
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0209      	lsls	r1, r1, #8
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000da0:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_TIM_Base_MspInit+0xbc>)
 8000da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	4013      	ands	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2103      	movs	r1, #3
 8000db2:	2013      	movs	r0, #19
 8000db4:	f000 fbb8 	bl	8001528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000db8:	2013      	movs	r0, #19
 8000dba:	f000 fbca 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000dbe:	e036      	b.n	8000e2e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM16)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <HAL_TIM_Base_MspInit+0xc0>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d116      	bne.n	8000df8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_TIM_Base_MspInit+0xbc>)
 8000dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dce:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_TIM_Base_MspInit+0xbc>)
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	0289      	lsls	r1, r1, #10
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_TIM_Base_MspInit+0xbc>)
 8000dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	029b      	lsls	r3, r3, #10
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2103      	movs	r1, #3
 8000dea:	2015      	movs	r0, #21
 8000dec:	f000 fb9c 	bl	8001528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000df0:	2015      	movs	r0, #21
 8000df2:	f000 fbae 	bl	8001552 <HAL_NVIC_EnableIRQ>
}
 8000df6:	e01a      	b.n	8000e2e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM17)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <HAL_TIM_Base_MspInit+0xc4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d115      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_TIM_Base_MspInit+0xbc>)
 8000e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_TIM_Base_MspInit+0xbc>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	02c9      	lsls	r1, r1, #11
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_TIM_Base_MspInit+0xbc>)
 8000e12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	02db      	lsls	r3, r3, #11
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2103      	movs	r1, #3
 8000e22:	2016      	movs	r0, #22
 8000e24:	f000 fb80 	bl	8001528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000e28:	2016      	movs	r0, #22
 8000e2a:	f000 fb92 	bl	8001552 <HAL_NVIC_EnableIRQ>
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b006      	add	sp, #24
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40002000 	.word	0x40002000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40014400 	.word	0x40014400
 8000e44:	40014800 	.word	0x40014800

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b099      	sub	sp, #100	; 0x64
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	234c      	movs	r3, #76	; 0x4c
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	0018      	movs	r0, r3
 8000e56:	2314      	movs	r3, #20
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f004 fbda 	bl	8005614 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	2430      	movs	r4, #48	; 0x30
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	0018      	movs	r0, r3
 8000e66:	231c      	movs	r3, #28
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	f004 fbd2 	bl	8005614 <memset>
  if(huart->Instance==USART1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a9e      	ldr	r2, [pc, #632]	; (80010f0 <HAL_UART_MspInit+0x2a8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d148      	bne.n	8000f0c <HAL_UART_MspInit+0xc4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 fc79 	bl	8002780 <HAL_RCCEx_PeriphCLKConfig>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e92:	f7ff fe77 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e96:	4b97      	ldr	r3, [pc, #604]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9a:	4b96      	ldr	r3, [pc, #600]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	01c9      	lsls	r1, r1, #7
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea4:	4b93      	ldr	r3, [pc, #588]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	01db      	lsls	r3, r3, #7
 8000eac:	4013      	ands	r3, r2
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b90      	ldr	r3, [pc, #576]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb6:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000eb8:	2101      	movs	r1, #1
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8000ebe:	4b8d      	ldr	r3, [pc, #564]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eca:	214c      	movs	r1, #76	; 0x4c
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	22c0      	movs	r2, #192	; 0xc0
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2201      	movs	r2, #1
 8000eea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	187a      	adds	r2, r7, r1
 8000eee:	23a0      	movs	r3, #160	; 0xa0
 8000ef0:	05db      	lsls	r3, r3, #23
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 fda1 	bl	8001a3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2103      	movs	r1, #3
 8000efe:	201b      	movs	r0, #27
 8000f00:	f000 fb12 	bl	8001528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f04:	201b      	movs	r0, #27
 8000f06:	f000 fb24 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000f0a:	e0ec      	b.n	80010e6 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a79      	ldr	r2, [pc, #484]	; (80010f8 <HAL_UART_MspInit+0x2b0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d148      	bne.n	8000fa8 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f16:	2130      	movs	r1, #48	; 0x30
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	0018      	movs	r0, r3
 8000f28:	f001 fc2a 	bl	8002780 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8000f30:	f7ff fe28 	bl	8000b84 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f34:	4b6f      	ldr	r3, [pc, #444]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f38:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	0289      	lsls	r1, r1, #10
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f42:	4b6c      	ldr	r3, [pc, #432]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f46:	2380      	movs	r3, #128	; 0x80
 8000f48:	029b      	lsls	r3, r3, #10
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f54:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5c:	4b65      	ldr	r3, [pc, #404]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f60:	2201      	movs	r2, #1
 8000f62:	4013      	ands	r3, r2
 8000f64:	623b      	str	r3, [r7, #32]
 8000f66:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f68:	214c      	movs	r1, #76	; 0x4c
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	220c      	movs	r2, #12
 8000f6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2202      	movs	r2, #2
 8000f74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2201      	movs	r2, #1
 8000f86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	187a      	adds	r2, r7, r1
 8000f8a:	23a0      	movs	r3, #160	; 0xa0
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	0011      	movs	r1, r2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f000 fd53 	bl	8001a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2103      	movs	r1, #3
 8000f9a:	201c      	movs	r0, #28
 8000f9c:	f000 fac4 	bl	8001528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fa0:	201c      	movs	r0, #28
 8000fa2:	f000 fad6 	bl	8001552 <HAL_NVIC_EnableIRQ>
}
 8000fa6:	e09e      	b.n	80010e6 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART3)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a53      	ldr	r2, [pc, #332]	; (80010fc <HAL_UART_MspInit+0x2b4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d15b      	bne.n	800106a <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fb2:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb6:	4b4f      	ldr	r3, [pc, #316]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	02c9      	lsls	r1, r1, #11
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fc0:	4b4c      	ldr	r3, [pc, #304]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	02db      	lsls	r3, r3, #11
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61fb      	str	r3, [r7, #28]
 8000fcc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd2:	4b48      	ldr	r3, [pc, #288]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fea:	4b42      	ldr	r3, [pc, #264]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000fec:	2102      	movs	r1, #2
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff2:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ffe:	244c      	movs	r4, #76	; 0x4c
 8001000:	193b      	adds	r3, r7, r4
 8001002:	2220      	movs	r2, #32
 8001004:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	193b      	adds	r3, r7, r4
 8001008:	2202      	movs	r2, #2
 800100a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	193b      	adds	r3, r7, r4
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	193b      	adds	r3, r7, r4
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001018:	193b      	adds	r3, r7, r4
 800101a:	2204      	movs	r2, #4
 800101c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	193a      	adds	r2, r7, r4
 8001020:	23a0      	movs	r3, #160	; 0xa0
 8001022:	05db      	lsls	r3, r3, #23
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f000 fd08 	bl	8001a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800102c:	0021      	movs	r1, r4
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2202      	movs	r2, #2
 8001038:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2204      	movs	r2, #4
 800104a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	187b      	adds	r3, r7, r1
 800104e:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <HAL_UART_MspInit+0x2b8>)
 8001050:	0019      	movs	r1, r3
 8001052:	0010      	movs	r0, r2
 8001054:	f000 fcf2 	bl	8001a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	2103      	movs	r1, #3
 800105c:	201d      	movs	r0, #29
 800105e:	f000 fa63 	bl	8001528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001062:	201d      	movs	r0, #29
 8001064:	f000 fa75 	bl	8001552 <HAL_NVIC_EnableIRQ>
}
 8001068:	e03d      	b.n	80010e6 <HAL_UART_MspInit+0x29e>
  else if(huart->Instance==USART4)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a25      	ldr	r2, [pc, #148]	; (8001104 <HAL_UART_MspInit+0x2bc>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d138      	bne.n	80010e6 <HAL_UART_MspInit+0x29e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8001076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	0309      	lsls	r1, r1, #12
 800107e:	430a      	orrs	r2, r1
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8001084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	031b      	lsls	r3, r3, #12
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8001092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 8001096:	2101      	movs	r1, #1
 8001098:	430a      	orrs	r2, r1
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_UART_MspInit+0x2ac>)
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a0:	2201      	movs	r2, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010a8:	214c      	movs	r1, #76	; 0x4c
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2203      	movs	r2, #3
 80010ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2202      	movs	r2, #2
 80010b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2204      	movs	r2, #4
 80010c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	187a      	adds	r2, r7, r1
 80010ca:	23a0      	movs	r3, #160	; 0xa0
 80010cc:	05db      	lsls	r3, r3, #23
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f000 fcb3 	bl	8001a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2103      	movs	r1, #3
 80010da:	201d      	movs	r0, #29
 80010dc:	f000 fa24 	bl	8001528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80010e0:	201d      	movs	r0, #29
 80010e2:	f000 fa36 	bl	8001552 <HAL_NVIC_EnableIRQ>
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b019      	add	sp, #100	; 0x64
 80010ec:	bd90      	pop	{r4, r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	40013800 	.word	0x40013800
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40004400 	.word	0x40004400
 80010fc:	40004800 	.word	0x40004800
 8001100:	50000400 	.word	0x50000400
 8001104:	40004c00 	.word	0x40004c00

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f910 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <DMA1_Channel1_IRQHandler+0x14>)
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fb7a 	bl	8001838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	200001c8 	.word	0x200001c8

08001150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <TIM3_IRQHandler+0x14>)
 8001156:	0018      	movs	r0, r3
 8001158:	f001 feca 	bl	8002ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	20000098 	.word	0x20000098

08001168 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <TIM14_IRQHandler+0x14>)
 800116e:	0018      	movs	r0, r3
 8001170:	f001 febe 	bl	8002ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	200000e4 	.word	0x200000e4

08001180 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <TIM16_IRQHandler+0x14>)
 8001186:	0018      	movs	r0, r3
 8001188:	f001 feb2 	bl	8002ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	20000130 	.word	0x20000130

08001198 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <TIM17_IRQHandler+0x14>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 fea6 	bl	8002ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	2000017c 	.word	0x2000017c

080011b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <SPI1_IRQHandler+0x14>)
 80011b6:	0018      	movs	r0, r3
 80011b8:	f001 fcce 	bl	8002b58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	20000034 	.word	0x20000034

080011c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <USART1_IRQHandler+0x14>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f002 fbec 	bl	80039ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	20000224 	.word	0x20000224

080011e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <USART2_IRQHandler+0x14>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f002 fbe0 	bl	80039ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	200002b8 	.word	0x200002b8

080011f8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <USART3_4_IRQHandler+0x1c>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f002 fbd4 	bl	80039ac <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <USART3_4_IRQHandler+0x20>)
 8001206:	0018      	movs	r0, r3
 8001208:	f002 fbd0 	bl	80039ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	2000034c 	.word	0x2000034c
 8001218:	200003e0 	.word	0x200003e0

0800121c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800122c:	f7ff fff6 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <LoopForever+0x6>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	; (8001268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <LoopForever+0xe>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	; (8001274 <LoopForever+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001256:	f004 f9b9 	bl	80055cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800125a:	f7ff f8c7 	bl	80003ec <main>

0800125e <LoopForever>:

LoopForever:
  b LoopForever
 800125e:	e7fe      	b.n	800125e <LoopForever>
  ldr   r0, =_estack
 8001260:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800126c:	080056cc 	.word	0x080056cc
  ldr r2, =_sbss
 8001270:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001274:	20000478 	.word	0x20000478

08001278 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_IRQHandler>
	...

0800127c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_Init+0x3c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Init+0x3c>)
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	0049      	lsls	r1, r1, #1
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f810 	bl	80012bc <HAL_InitTick>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d003      	beq.n	80012a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e001      	b.n	80012ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fc72 	bl	8000b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	781b      	ldrb	r3, [r3, #0]
}
 80012b0:	0018      	movs	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	b002      	add	sp, #8
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40022000 	.word	0x40022000

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_InitTick+0x88>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d02b      	beq.n	800132c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_InitTick+0x8c>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_InitTick+0x88>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	0019      	movs	r1, r3
 80012de:	23fa      	movs	r3, #250	; 0xfa
 80012e0:	0098      	lsls	r0, r3, #2
 80012e2:	f7fe ff0d 	bl	8000100 <__udivsi3>
 80012e6:	0003      	movs	r3, r0
 80012e8:	0019      	movs	r1, r3
 80012ea:	0020      	movs	r0, r4
 80012ec:	f7fe ff08 	bl	8000100 <__udivsi3>
 80012f0:	0003      	movs	r3, r0
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 f93d 	bl	8001572 <HAL_SYSTICK_Config>
 80012f8:	1e03      	subs	r3, r0, #0
 80012fa:	d112      	bne.n	8001322 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d80a      	bhi.n	8001318 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	2301      	movs	r3, #1
 8001306:	425b      	negs	r3, r3
 8001308:	2200      	movs	r2, #0
 800130a:	0018      	movs	r0, r3
 800130c:	f000 f90c 	bl	8001528 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_InitTick+0x90>)
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e00d      	b.n	8001334 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001318:	230f      	movs	r3, #15
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e008      	b.n	8001334 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001322:	230f      	movs	r3, #15
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e003      	b.n	8001334 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800132c:	230f      	movs	r3, #15
 800132e:	18fb      	adds	r3, r7, r3
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001334:	230f      	movs	r3, #15
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	781b      	ldrb	r3, [r3, #0]
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	b005      	add	sp, #20
 8001340:	bd90      	pop	{r4, r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	20000008 	.word	0x20000008
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_IncTick+0x1c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	001a      	movs	r2, r3
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x20>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	18d2      	adds	r2, r2, r3
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_IncTick+0x20>)
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	20000008 	.word	0x20000008
 8001370:	20000474 	.word	0x20000474

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b02      	ldr	r3, [pc, #8]	; (8001384 <HAL_GetTick+0x10>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	20000474 	.word	0x20000474

08001388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001390:	f7ff fff0 	bl	8001374 <HAL_GetTick>
 8001394:	0003      	movs	r3, r0
 8001396:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	d005      	beq.n	80013ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_Delay+0x44>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	001a      	movs	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	189b      	adds	r3, r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	f7ff ffe0 	bl	8001374 <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d8f7      	bhi.n	80013b0 <HAL_Delay+0x28>
  {
  }
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b004      	add	sp, #16
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	20000008 	.word	0x20000008

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	0002      	movs	r2, r0
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	1dfb      	adds	r3, r7, #7
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b7f      	cmp	r3, #127	; 0x7f
 80013e2:	d809      	bhi.n	80013f8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	001a      	movs	r2, r3
 80013ea:	231f      	movs	r3, #31
 80013ec:	401a      	ands	r2, r3
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_EnableIRQ+0x30>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	4091      	lsls	r1, r2
 80013f4:	000a      	movs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	0002      	movs	r2, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b7f      	cmp	r3, #127	; 0x7f
 8001418:	d828      	bhi.n	800146c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800141a:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <__NVIC_SetPriority+0xd4>)
 800141c:	1dfb      	adds	r3, r7, #7
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b25b      	sxtb	r3, r3
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	33c0      	adds	r3, #192	; 0xc0
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	589b      	ldr	r3, [r3, r2]
 800142a:	1dfa      	adds	r2, r7, #7
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	0011      	movs	r1, r2
 8001430:	2203      	movs	r2, #3
 8001432:	400a      	ands	r2, r1
 8001434:	00d2      	lsls	r2, r2, #3
 8001436:	21ff      	movs	r1, #255	; 0xff
 8001438:	4091      	lsls	r1, r2
 800143a:	000a      	movs	r2, r1
 800143c:	43d2      	mvns	r2, r2
 800143e:	401a      	ands	r2, r3
 8001440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	019b      	lsls	r3, r3, #6
 8001446:	22ff      	movs	r2, #255	; 0xff
 8001448:	401a      	ands	r2, r3
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	0018      	movs	r0, r3
 8001450:	2303      	movs	r3, #3
 8001452:	4003      	ands	r3, r0
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001458:	481f      	ldr	r0, [pc, #124]	; (80014d8 <__NVIC_SetPriority+0xd4>)
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b25b      	sxtb	r3, r3
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	430a      	orrs	r2, r1
 8001464:	33c0      	adds	r3, #192	; 0xc0
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800146a:	e031      	b.n	80014d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <__NVIC_SetPriority+0xd8>)
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	0019      	movs	r1, r3
 8001474:	230f      	movs	r3, #15
 8001476:	400b      	ands	r3, r1
 8001478:	3b08      	subs	r3, #8
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3306      	adds	r3, #6
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	18d3      	adds	r3, r2, r3
 8001482:	3304      	adds	r3, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	1dfa      	adds	r2, r7, #7
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	0011      	movs	r1, r2
 800148c:	2203      	movs	r2, #3
 800148e:	400a      	ands	r2, r1
 8001490:	00d2      	lsls	r2, r2, #3
 8001492:	21ff      	movs	r1, #255	; 0xff
 8001494:	4091      	lsls	r1, r2
 8001496:	000a      	movs	r2, r1
 8001498:	43d2      	mvns	r2, r2
 800149a:	401a      	ands	r2, r3
 800149c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	019b      	lsls	r3, r3, #6
 80014a2:	22ff      	movs	r2, #255	; 0xff
 80014a4:	401a      	ands	r2, r3
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	0018      	movs	r0, r3
 80014ac:	2303      	movs	r3, #3
 80014ae:	4003      	ands	r3, r0
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <__NVIC_SetPriority+0xd8>)
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	001c      	movs	r4, r3
 80014bc:	230f      	movs	r3, #15
 80014be:	4023      	ands	r3, r4
 80014c0:	3b08      	subs	r3, #8
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	430a      	orrs	r2, r1
 80014c6:	3306      	adds	r3, #6
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	18c3      	adds	r3, r0, r3
 80014cc:	3304      	adds	r3, #4
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b003      	add	sp, #12
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	1e5a      	subs	r2, r3, #1
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	045b      	lsls	r3, r3, #17
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d301      	bcc.n	80014f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f4:	2301      	movs	r3, #1
 80014f6:	e010      	b.n	800151a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <SysTick_Config+0x44>)
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	3a01      	subs	r2, #1
 80014fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001500:	2301      	movs	r3, #1
 8001502:	425b      	negs	r3, r3
 8001504:	2103      	movs	r1, #3
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff ff7c 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x44>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x44>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	210f      	movs	r1, #15
 8001534:	187b      	adds	r3, r7, r1
 8001536:	1c02      	adds	r2, r0, #0
 8001538:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	187b      	adds	r3, r7, r1
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b25b      	sxtb	r3, r3
 8001542:	0011      	movs	r1, r2
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff ff5d 	bl	8001404 <__NVIC_SetPriority>
}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b004      	add	sp, #16
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	0002      	movs	r2, r0
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b25b      	sxtb	r3, r3
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff ff33 	bl	80013d0 <__NVIC_EnableIRQ>
}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff ffaf 	bl	80014e0 <SysTick_Config>
 8001582:	0003      	movs	r3, r0
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b002      	add	sp, #8
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e077      	b.n	800168e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a3d      	ldr	r2, [pc, #244]	; (8001698 <HAL_DMA_Init+0x10c>)
 80015a4:	4694      	mov	ip, r2
 80015a6:	4463      	add	r3, ip
 80015a8:	2114      	movs	r1, #20
 80015aa:	0018      	movs	r0, r3
 80015ac:	f7fe fda8 	bl	8000100 <__udivsi3>
 80015b0:	0003      	movs	r3, r0
 80015b2:	009a      	lsls	r2, r3, #2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2225      	movs	r2, #37	; 0x25
 80015bc:	2102      	movs	r1, #2
 80015be:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4934      	ldr	r1, [pc, #208]	; (800169c <HAL_DMA_Init+0x110>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	0018      	movs	r0, r3
 800160a:	f000 f9c7 	bl	800199c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	01db      	lsls	r3, r3, #7
 8001616:	429a      	cmp	r2, r3
 8001618:	d102      	bne.n	8001620 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	213f      	movs	r1, #63	; 0x3f
 800162a:	400a      	ands	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001636:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d011      	beq.n	8001664 <HAL_DMA_Init+0xd8>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d80d      	bhi.n	8001664 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	0018      	movs	r0, r3
 800164c:	f000 f9d2 	bl	80019f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	e008      	b.n	8001676 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2225      	movs	r2, #37	; 0x25
 8001680:	2101      	movs	r1, #1
 8001682:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2224      	movs	r2, #36	; 0x24
 8001688:	2100      	movs	r1, #0
 800168a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b002      	add	sp, #8
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	bffdfff8 	.word	0xbffdfff8
 800169c:	ffff800f 	.word	0xffff800f

080016a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e050      	b.n	8001754 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2225      	movs	r2, #37	; 0x25
 80016b6:	5c9b      	ldrb	r3, [r3, r2]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d008      	beq.n	80016d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2204      	movs	r2, #4
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2224      	movs	r2, #36	; 0x24
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e041      	b.n	8001754 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	210e      	movs	r1, #14
 80016dc:	438a      	bics	r2, r1
 80016de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	491c      	ldr	r1, [pc, #112]	; (800175c <HAL_DMA_Abort+0xbc>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2101      	movs	r1, #1
 80016fc:	438a      	bics	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001700:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_DMA_Abort+0xc0>)
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	221c      	movs	r2, #28
 800170a:	4013      	ands	r3, r2
 800170c:	2201      	movs	r2, #1
 800170e:	409a      	lsls	r2, r3
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_DMA_Abort+0xc0>)
 8001712:	430a      	orrs	r2, r1
 8001714:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800171e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00c      	beq.n	8001742 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001732:	490a      	ldr	r1, [pc, #40]	; (800175c <HAL_DMA_Abort+0xbc>)
 8001734:	400a      	ands	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001740:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2225      	movs	r2, #37	; 0x25
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2224      	movs	r2, #36	; 0x24
 800174e:	2100      	movs	r1, #0
 8001750:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}
 800175c:	fffffeff 	.word	0xfffffeff
 8001760:	40020000 	.word	0x40020000

08001764 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800176c:	210f      	movs	r1, #15
 800176e:	187b      	adds	r3, r7, r1
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2225      	movs	r2, #37	; 0x25
 8001778:	5c9b      	ldrb	r3, [r3, r2]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d006      	beq.n	800178e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2204      	movs	r2, #4
 8001784:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e049      	b.n	8001822 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	210e      	movs	r1, #14
 800179a:	438a      	bics	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2101      	movs	r1, #1
 80017aa:	438a      	bics	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	491d      	ldr	r1, [pc, #116]	; (8001830 <HAL_DMA_Abort_IT+0xcc>)
 80017ba:	400a      	ands	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_DMA_Abort_IT+0xd0>)
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	221c      	movs	r2, #28
 80017c8:	4013      	ands	r3, r2
 80017ca:	2201      	movs	r2, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_DMA_Abort_IT+0xd0>)
 80017d0:	430a      	orrs	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00c      	beq.n	8001800 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017f0:	490f      	ldr	r1, [pc, #60]	; (8001830 <HAL_DMA_Abort_IT+0xcc>)
 80017f2:	400a      	ands	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2225      	movs	r2, #37	; 0x25
 8001804:	2101      	movs	r1, #1
 8001806:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2224      	movs	r2, #36	; 0x24
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	0010      	movs	r0, r2
 8001820:	4798      	blx	r3
    }
  }
  return status;
 8001822:	230f      	movs	r3, #15
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}
 8001830:	fffffeff 	.word	0xfffffeff
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001840:	4b55      	ldr	r3, [pc, #340]	; (8001998 <HAL_DMA_IRQHandler+0x160>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	221c      	movs	r2, #28
 8001854:	4013      	ands	r3, r2
 8001856:	2204      	movs	r2, #4
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4013      	ands	r3, r2
 8001860:	d027      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x7a>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2204      	movs	r2, #4
 8001866:	4013      	ands	r3, r2
 8001868:	d023      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2220      	movs	r2, #32
 8001872:	4013      	ands	r3, r2
 8001874:	d107      	bne.n	8001886 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2104      	movs	r1, #4
 8001882:	438a      	bics	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001886:	4b44      	ldr	r3, [pc, #272]	; (8001998 <HAL_DMA_IRQHandler+0x160>)
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	221c      	movs	r2, #28
 8001890:	4013      	ands	r3, r2
 8001892:	2204      	movs	r2, #4
 8001894:	409a      	lsls	r2, r3
 8001896:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_DMA_IRQHandler+0x160>)
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d100      	bne.n	80018a6 <HAL_DMA_IRQHandler+0x6e>
 80018a4:	e073      	b.n	800198e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	0010      	movs	r0, r2
 80018ae:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80018b0:	e06d      	b.n	800198e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	221c      	movs	r2, #28
 80018b8:	4013      	ands	r3, r2
 80018ba:	2202      	movs	r2, #2
 80018bc:	409a      	lsls	r2, r3
 80018be:	0013      	movs	r3, r2
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	d02e      	beq.n	8001924 <HAL_DMA_IRQHandler+0xec>
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2202      	movs	r2, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	d02a      	beq.n	8001924 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2220      	movs	r2, #32
 80018d6:	4013      	ands	r3, r2
 80018d8:	d10b      	bne.n	80018f2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	210a      	movs	r1, #10
 80018e6:	438a      	bics	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2225      	movs	r2, #37	; 0x25
 80018ee:	2101      	movs	r1, #1
 80018f0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_DMA_IRQHandler+0x160>)
 80018f4:	6859      	ldr	r1, [r3, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	221c      	movs	r2, #28
 80018fc:	4013      	ands	r3, r2
 80018fe:	2202      	movs	r2, #2
 8001900:	409a      	lsls	r2, r3
 8001902:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_DMA_IRQHandler+0x160>)
 8001904:	430a      	orrs	r2, r1
 8001906:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2224      	movs	r2, #36	; 0x24
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	2b00      	cmp	r3, #0
 8001916:	d03a      	beq.n	800198e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	0010      	movs	r0, r2
 8001920:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001922:	e034      	b.n	800198e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	221c      	movs	r2, #28
 800192a:	4013      	ands	r3, r2
 800192c:	2208      	movs	r2, #8
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	d02b      	beq.n	8001990 <HAL_DMA_IRQHandler+0x158>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2208      	movs	r2, #8
 800193c:	4013      	ands	r3, r2
 800193e:	d027      	beq.n	8001990 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	210e      	movs	r1, #14
 800194c:	438a      	bics	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_DMA_IRQHandler+0x160>)
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	221c      	movs	r2, #28
 800195a:	4013      	ands	r3, r2
 800195c:	2201      	movs	r2, #1
 800195e:	409a      	lsls	r2, r3
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_DMA_IRQHandler+0x160>)
 8001962:	430a      	orrs	r2, r1
 8001964:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2225      	movs	r2, #37	; 0x25
 8001970:	2101      	movs	r1, #1
 8001972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2224      	movs	r2, #36	; 0x24
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	0010      	movs	r0, r2
 800198c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46c0      	nop			; (mov r8, r8)
}
 8001992:	46bd      	mov	sp, r7
 8001994:	b004      	add	sp, #16
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40020000 	.word	0x40020000

0800199c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	4a10      	ldr	r2, [pc, #64]	; (80019ec <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80019ac:	4694      	mov	ip, r2
 80019ae:	4463      	add	r3, ip
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	001a      	movs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	001a      	movs	r2, r3
 80019be:	23ff      	movs	r3, #255	; 0xff
 80019c0:	4013      	ands	r3, r2
 80019c2:	3b08      	subs	r3, #8
 80019c4:	2114      	movs	r1, #20
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7fe fb9a 	bl	8000100 <__udivsi3>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80019d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	221f      	movs	r2, #31
 80019da:	4013      	ands	r3, r2
 80019dc:	2201      	movs	r2, #1
 80019de:	409a      	lsls	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	10008200 	.word	0x10008200
 80019f0:	40020880 	.word	0x40020880

080019f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	223f      	movs	r2, #63	; 0x3f
 8001a02:	4013      	ands	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a0a:	4694      	mov	ip, r2
 8001a0c:	4463      	add	r3, ip
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	001a      	movs	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a07      	ldr	r2, [pc, #28]	; (8001a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	4013      	ands	r3, r2
 8001a24:	2201      	movs	r2, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	1000823f 	.word	0x1000823f
 8001a38:	40020940 	.word	0x40020940

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4a:	e147      	b.n	8001cdc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2101      	movs	r1, #1
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4091      	lsls	r1, r2
 8001a56:	000a      	movs	r2, r1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d100      	bne.n	8001a64 <HAL_GPIO_Init+0x28>
 8001a62:	e138      	b.n	8001cd6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d005      	beq.n	8001a7c <HAL_GPIO_Init+0x40>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d130      	bne.n	8001ade <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	0013      	movs	r3, r2
 8001a8c:	43da      	mvns	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	43da      	mvns	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	2201      	movs	r2, #1
 8001aca:	401a      	ands	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d017      	beq.n	8001b1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	43da      	mvns	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2203      	movs	r2, #3
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d123      	bne.n	8001b6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	0092      	lsls	r2, r2, #2
 8001b30:	58d3      	ldr	r3, [r2, r3]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2207      	movs	r2, #7
 8001b38:	4013      	ands	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	0013      	movs	r3, r2
 8001b42:	43da      	mvns	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2107      	movs	r1, #7
 8001b52:	400b      	ands	r3, r1
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	409a      	lsls	r2, r3
 8001b58:	0013      	movs	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3208      	adds	r2, #8
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	6939      	ldr	r1, [r7, #16]
 8001b6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	401a      	ands	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	409a      	lsls	r2, r3
 8001b94:	0013      	movs	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	029b      	lsls	r3, r3, #10
 8001baa:	4013      	ands	r3, r2
 8001bac:	d100      	bne.n	8001bb0 <HAL_GPIO_Init+0x174>
 8001bae:	e092      	b.n	8001cd6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001bb0:	4a50      	ldr	r2, [pc, #320]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3318      	adds	r3, #24
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	589b      	ldr	r3, [r3, r2]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	23a0      	movs	r3, #160	; 0xa0
 8001bd8:	05db      	lsls	r3, r3, #23
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d013      	beq.n	8001c06 <HAL_GPIO_Init+0x1ca>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a45      	ldr	r2, [pc, #276]	; (8001cf8 <HAL_GPIO_Init+0x2bc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00d      	beq.n	8001c02 <HAL_GPIO_Init+0x1c6>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <HAL_GPIO_Init+0x2c0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0x1c2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a43      	ldr	r2, [pc, #268]	; (8001d00 <HAL_GPIO_Init+0x2c4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_GPIO_Init+0x1be>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x1cc>
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	e004      	b.n	8001c08 <HAL_GPIO_Init+0x1cc>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e002      	b.n	8001c08 <HAL_GPIO_Init+0x1cc>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x1cc>
 8001c06:	2300      	movs	r3, #0
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	2103      	movs	r1, #3
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	00d2      	lsls	r2, r2, #3
 8001c10:	4093      	lsls	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c18:	4936      	ldr	r1, [pc, #216]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3318      	adds	r3, #24
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c26:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	035b      	lsls	r3, r3, #13
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c50:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	039b      	lsls	r3, r3, #14
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c7a:	4a1e      	ldr	r2, [pc, #120]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001c7c:	2384      	movs	r3, #132	; 0x84
 8001c7e:	58d3      	ldr	r3, [r2, r3]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	43da      	mvns	r2, r3
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	029b      	lsls	r3, r3, #10
 8001c94:	4013      	ands	r3, r2
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ca0:	4914      	ldr	r1, [pc, #80]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001ca2:	2284      	movs	r2, #132	; 0x84
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	58d3      	ldr	r3, [r2, r3]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	025b      	lsls	r3, r3, #9
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cce:	4909      	ldr	r1, [pc, #36]	; (8001cf4 <HAL_GPIO_Init+0x2b8>)
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	40da      	lsrs	r2, r3
 8001ce4:	1e13      	subs	r3, r2, #0
 8001ce6:	d000      	beq.n	8001cea <HAL_GPIO_Init+0x2ae>
 8001ce8:	e6b0      	b.n	8001a4c <HAL_GPIO_Init+0x10>
  }
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b006      	add	sp, #24
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021800 	.word	0x40021800
 8001cf8:	50000400 	.word	0x50000400
 8001cfc:	50000800 	.word	0x50000800
 8001d00:	50000c00 	.word	0x50000c00

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	0008      	movs	r0, r1
 8001d0e:	0011      	movs	r1, r2
 8001d10:	1cbb      	adds	r3, r7, #2
 8001d12:	1c02      	adds	r2, r0, #0
 8001d14:	801a      	strh	r2, [r3, #0]
 8001d16:	1c7b      	adds	r3, r7, #1
 8001d18:	1c0a      	adds	r2, r1, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d1c:	1c7b      	adds	r3, r7, #1
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d004      	beq.n	8001d2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d24:	1cbb      	adds	r3, r7, #2
 8001d26:	881a      	ldrh	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d2c:	e003      	b.n	8001d36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d2e:	1cbb      	adds	r3, r7, #2
 8001d30:	881a      	ldrh	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b002      	add	sp, #8
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	000a      	movs	r2, r1
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d52:	1cbb      	adds	r3, r7, #2
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	041a      	lsls	r2, r3, #16
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	1cb9      	adds	r1, r7, #2
 8001d62:	8809      	ldrh	r1, [r1, #0]
 8001d64:	400b      	ands	r3, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d11f      	bne.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	0013      	movs	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	189b      	adds	r3, r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4912      	ldr	r1, [pc, #72]	; (8001df0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7fe f9aa 	bl	8000100 <__udivsi3>
 8001dac:	0003      	movs	r3, r0
 8001dae:	3301      	adds	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db2:	e008      	b.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e001      	b.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e009      	b.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc6:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	401a      	ands	r2, r3
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d0ed      	beq.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	40007000 	.word	0x40007000
 8001de8:	fffff9ff 	.word	0xfffff9ff
 8001dec:	20000000 	.word	0x20000000
 8001df0:	000f4240 	.word	0x000f4240

08001df4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	23e0      	movs	r3, #224	; 0xe0
 8001dfe:	01db      	lsls	r3, r3, #7
 8001e00:	4013      	ands	r3, r2
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e2f3      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	d100      	bne.n	8001e2a <HAL_RCC_OscConfig+0x1e>
 8001e28:	e07c      	b.n	8001f24 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2a:	4bc3      	ldr	r3, [pc, #780]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2238      	movs	r2, #56	; 0x38
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e34:	4bc0      	ldr	r3, [pc, #768]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b10      	cmp	r3, #16
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3e>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d002      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4bb9      	ldr	r3, [pc, #740]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	029b      	lsls	r3, r3, #10
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d062      	beq.n	8001f22 <HAL_RCC_OscConfig+0x116>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d15e      	bne.n	8001f22 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e2ce      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	025b      	lsls	r3, r3, #9
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x78>
 8001e74:	4bb0      	ldr	r3, [pc, #704]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4baf      	ldr	r3, [pc, #700]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	0249      	lsls	r1, r1, #9
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e020      	b.n	8001ec6 <HAL_RCC_OscConfig+0xba>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	23a0      	movs	r3, #160	; 0xa0
 8001e8a:	02db      	lsls	r3, r3, #11
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d10e      	bne.n	8001eae <HAL_RCC_OscConfig+0xa2>
 8001e90:	4ba9      	ldr	r3, [pc, #676]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4ba8      	ldr	r3, [pc, #672]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	2180      	movs	r1, #128	; 0x80
 8001e98:	02c9      	lsls	r1, r1, #11
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	4ba6      	ldr	r3, [pc, #664]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4ba5      	ldr	r3, [pc, #660]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0249      	lsls	r1, r1, #9
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e00b      	b.n	8001ec6 <HAL_RCC_OscConfig+0xba>
 8001eae:	4ba2      	ldr	r3, [pc, #648]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4ba1      	ldr	r3, [pc, #644]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001eb4:	49a1      	ldr	r1, [pc, #644]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	4b9f      	ldr	r3, [pc, #636]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	499f      	ldr	r1, [pc, #636]	; (8002140 <HAL_RCC_OscConfig+0x334>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d014      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff fa51 	bl	8001374 <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fa4c 	bl	8001374 <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e28d      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eea:	4b93      	ldr	r3, [pc, #588]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	029b      	lsls	r3, r3, #10
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xcc>
 8001ef6:	e015      	b.n	8001f24 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fa3c 	bl	8001374 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f02:	f7ff fa37 	bl	8001374 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	; 0x64
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e278      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f14:	4b88      	ldr	r3, [pc, #544]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	029b      	lsls	r3, r3, #10
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0xf6>
 8001f20:	e000      	b.n	8001f24 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d100      	bne.n	8001f30 <HAL_RCC_OscConfig+0x124>
 8001f2e:	e099      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2238      	movs	r2, #56	; 0x38
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f3a:	4b7f      	ldr	r3, [pc, #508]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4013      	ands	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_OscConfig+0x144>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d002      	beq.n	8001f56 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d135      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f56:	4b78      	ldr	r3, [pc, #480]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x162>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e24b      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b72      	ldr	r3, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a74      	ldr	r2, [pc, #464]	; (8002144 <HAL_RCC_OscConfig+0x338>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	021a      	lsls	r2, r3, #8
 8001f7e:	4b6e      	ldr	r3, [pc, #440]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d112      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f8a:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6e      	ldr	r2, [pc, #440]	; (8002148 <HAL_RCC_OscConfig+0x33c>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	4b67      	ldr	r3, [pc, #412]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f9e:	4b66      	ldr	r3, [pc, #408]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	0adb      	lsrs	r3, r3, #11
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	4a68      	ldr	r2, [pc, #416]	; (800214c <HAL_RCC_OscConfig+0x340>)
 8001faa:	40da      	lsrs	r2, r3
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <HAL_RCC_OscConfig+0x344>)
 8001fae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fb0:	4b68      	ldr	r3, [pc, #416]	; (8002154 <HAL_RCC_OscConfig+0x348>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff f981 	bl	80012bc <HAL_InitTick>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d051      	beq.n	8002062 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e221      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d030      	beq.n	800202c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a5e      	ldr	r2, [pc, #376]	; (8002148 <HAL_RCC_OscConfig+0x33c>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	4b57      	ldr	r3, [pc, #348]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001fde:	4b56      	ldr	r3, [pc, #344]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b55      	ldr	r3, [pc, #340]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0049      	lsls	r1, r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff f9c2 	bl	8001374 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff f9bd 	bl	8001374 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1fe      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002008:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4013      	ands	r3, r2
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b48      	ldr	r3, [pc, #288]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a4a      	ldr	r2, [pc, #296]	; (8002144 <HAL_RCC_OscConfig+0x338>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	4b44      	ldr	r3, [pc, #272]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002026:	430a      	orrs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e01b      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002032:	4949      	ldr	r1, [pc, #292]	; (8002158 <HAL_RCC_OscConfig+0x34c>)
 8002034:	400a      	ands	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f99c 	bl	8001374 <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7ff f997 	bl	8001374 <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1d8      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002054:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4013      	ands	r3, r2
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x236>
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002062:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2208      	movs	r2, #8
 800206a:	4013      	ands	r3, r2
 800206c:	d047      	beq.n	80020fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2238      	movs	r2, #56	; 0x38
 8002074:	4013      	ands	r3, r2
 8002076:	2b18      	cmp	r3, #24
 8002078:	d10a      	bne.n	8002090 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 800207c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207e:	2202      	movs	r2, #2
 8002080:	4013      	ands	r3, r2
 8002082:	d03c      	beq.n	80020fe <HAL_RCC_OscConfig+0x2f2>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d138      	bne.n	80020fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e1ba      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d019      	beq.n	80020cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 800209a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800209c:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f966 	bl	8001374 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff f961 	bl	8001374 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1a2      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 80020c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d0f1      	beq.n	80020ae <HAL_RCC_OscConfig+0x2a2>
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 80020ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	438a      	bics	r2, r1
 80020d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f94c 	bl	8001374 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7ff f947 	bl	8001374 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e188      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f8:	2202      	movs	r2, #2
 80020fa:	4013      	ands	r3, r2
 80020fc:	d1f1      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2204      	movs	r2, #4
 8002104:	4013      	ands	r3, r2
 8002106:	d100      	bne.n	800210a <HAL_RCC_OscConfig+0x2fe>
 8002108:	e0c6      	b.n	8002298 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	231f      	movs	r3, #31
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2238      	movs	r2, #56	; 0x38
 8002118:	4013      	ands	r3, r2
 800211a:	2b20      	cmp	r3, #32
 800211c:	d11e      	bne.n	800215c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_OscConfig+0x32c>)
 8002120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCC_OscConfig+0x31e>
 8002128:	e0b6      	b.n	8002298 <HAL_RCC_OscConfig+0x48c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d000      	beq.n	8002134 <HAL_RCC_OscConfig+0x328>
 8002132:	e0b1      	b.n	8002298 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e166      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
 8002138:	40021000 	.word	0x40021000
 800213c:	fffeffff 	.word	0xfffeffff
 8002140:	fffbffff 	.word	0xfffbffff
 8002144:	ffff80ff 	.word	0xffff80ff
 8002148:	ffffc7ff 	.word	0xffffc7ff
 800214c:	00f42400 	.word	0x00f42400
 8002150:	20000000 	.word	0x20000000
 8002154:	20000004 	.word	0x20000004
 8002158:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800215c:	4bac      	ldr	r3, [pc, #688]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 800215e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002160:	2380      	movs	r3, #128	; 0x80
 8002162:	055b      	lsls	r3, r3, #21
 8002164:	4013      	ands	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_RCC_OscConfig+0x360>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x362>
 800216c:	2300      	movs	r3, #0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d011      	beq.n	8002196 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4ba7      	ldr	r3, [pc, #668]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002176:	4ba6      	ldr	r3, [pc, #664]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002178:	2180      	movs	r1, #128	; 0x80
 800217a:	0549      	lsls	r1, r1, #21
 800217c:	430a      	orrs	r2, r1
 800217e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002180:	4ba3      	ldr	r3, [pc, #652]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	055b      	lsls	r3, r3, #21
 8002188:	4013      	ands	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800218e:	231f      	movs	r3, #31
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2201      	movs	r2, #1
 8002194:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002196:	4b9f      	ldr	r3, [pc, #636]	; (8002414 <HAL_RCC_OscConfig+0x608>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d11a      	bne.n	80021d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a2:	4b9c      	ldr	r3, [pc, #624]	; (8002414 <HAL_RCC_OscConfig+0x608>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4b9b      	ldr	r3, [pc, #620]	; (8002414 <HAL_RCC_OscConfig+0x608>)
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	0049      	lsls	r1, r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021b0:	f7ff f8e0 	bl	8001374 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7ff f8db 	bl	8001374 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e11c      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021cc:	4b91      	ldr	r3, [pc, #580]	; (8002414 <HAL_RCC_OscConfig+0x608>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d106      	bne.n	80021ee <HAL_RCC_OscConfig+0x3e2>
 80021e0:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80021e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021e4:	4b8a      	ldr	r3, [pc, #552]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	430a      	orrs	r2, r1
 80021ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80021ec:	e01c      	b.n	8002228 <HAL_RCC_OscConfig+0x41c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b05      	cmp	r3, #5
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x404>
 80021f6:	4b86      	ldr	r3, [pc, #536]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80021f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021fa:	4b85      	ldr	r3, [pc, #532]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80021fc:	2104      	movs	r1, #4
 80021fe:	430a      	orrs	r2, r1
 8002200:	65da      	str	r2, [r3, #92]	; 0x5c
 8002202:	4b83      	ldr	r3, [pc, #524]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002204:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002206:	4b82      	ldr	r3, [pc, #520]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002208:	2101      	movs	r1, #1
 800220a:	430a      	orrs	r2, r1
 800220c:	65da      	str	r2, [r3, #92]	; 0x5c
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0x41c>
 8002210:	4b7f      	ldr	r3, [pc, #508]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002214:	4b7e      	ldr	r3, [pc, #504]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002216:	2101      	movs	r1, #1
 8002218:	438a      	bics	r2, r1
 800221a:	65da      	str	r2, [r3, #92]	; 0x5c
 800221c:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 800221e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002220:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002222:	2104      	movs	r1, #4
 8002224:	438a      	bics	r2, r1
 8002226:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d014      	beq.n	800225a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7ff f8a0 	bl	8001374 <HAL_GetTick>
 8002234:	0003      	movs	r3, r0
 8002236:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	e009      	b.n	800224e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7ff f89b 	bl	8001374 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a74      	ldr	r2, [pc, #464]	; (8002418 <HAL_RCC_OscConfig+0x60c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0db      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224e:	4b70      	ldr	r3, [pc, #448]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x42e>
 8002258:	e013      	b.n	8002282 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff f88b 	bl	8001374 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002262:	e009      	b.n	8002278 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002264:	f7ff f886 	bl	8001374 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	4a6a      	ldr	r2, [pc, #424]	; (8002418 <HAL_RCC_OscConfig+0x60c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0c6      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002278:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002282:	231f      	movs	r3, #31
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b60      	ldr	r3, [pc, #384]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 800228e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002290:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002292:	4962      	ldr	r1, [pc, #392]	; (800241c <HAL_RCC_OscConfig+0x610>)
 8002294:	400a      	ands	r2, r1
 8002296:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d100      	bne.n	80022a2 <HAL_RCC_OscConfig+0x496>
 80022a0:	e0b0      	b.n	8002404 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a2:	4b5b      	ldr	r3, [pc, #364]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2238      	movs	r2, #56	; 0x38
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d100      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4a4>
 80022ae:	e078      	b.n	80023a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d153      	bne.n	8002360 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b55      	ldr	r3, [pc, #340]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b54      	ldr	r3, [pc, #336]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80022be:	4958      	ldr	r1, [pc, #352]	; (8002420 <HAL_RCC_OscConfig+0x614>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7ff f856 	bl	8001374 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff f851 	bl	8001374 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e092      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e0:	4b4b      	ldr	r3, [pc, #300]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	049b      	lsls	r3, r3, #18
 80022e8:	4013      	ands	r3, r2
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	4b48      	ldr	r3, [pc, #288]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x618>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1a      	ldr	r2, [r3, #32]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	431a      	orrs	r2, r3
 8002314:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002316:	430a      	orrs	r2, r1
 8002318:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002320:	2180      	movs	r1, #128	; 0x80
 8002322:	0449      	lsls	r1, r1, #17
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	4b38      	ldr	r3, [pc, #224]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0549      	lsls	r1, r1, #21
 8002332:	430a      	orrs	r2, r1
 8002334:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff f81d 	bl	8001374 <HAL_GetTick>
 800233a:	0003      	movs	r3, r0
 800233c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff f818 	bl	8001374 <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e059      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	049b      	lsls	r3, r3, #18
 800235a:	4013      	ands	r3, r2
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x534>
 800235e:	e051      	b.n	8002404 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b2b      	ldr	r3, [pc, #172]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002366:	492e      	ldr	r1, [pc, #184]	; (8002420 <HAL_RCC_OscConfig+0x614>)
 8002368:	400a      	ands	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7ff f802 	bl	8001374 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe fffd 	bl	8001374 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e03e      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	049b      	lsls	r3, r3, #18
 8002390:	4013      	ands	r3, r2
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 800239a:	4923      	ldr	r1, [pc, #140]	; (8002428 <HAL_RCC_OscConfig+0x61c>)
 800239c:	400a      	ands	r2, r1
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	e030      	b.n	8002404 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e02b      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <HAL_RCC_OscConfig+0x604>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2203      	movs	r2, #3
 80023b8:	401a      	ands	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d11e      	bne.n	8002400 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2270      	movs	r2, #112	; 0x70
 80023c6:	401a      	ands	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d117      	bne.n	8002400 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	23fe      	movs	r3, #254	; 0xfe
 80023d4:	01db      	lsls	r3, r3, #7
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10e      	bne.n	8002400 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	23f8      	movs	r3, #248	; 0xf8
 80023e6:	039b      	lsls	r3, r3, #14
 80023e8:	401a      	ands	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	0f5b      	lsrs	r3, r3, #29
 80023f6:	075a      	lsls	r2, r3, #29
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b008      	add	sp, #32
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
 8002418:	00001388 	.word	0x00001388
 800241c:	efffffff 	.word	0xefffffff
 8002420:	feffffff 	.word	0xfeffffff
 8002424:	1fc1808c 	.word	0x1fc1808c
 8002428:	effefffc 	.word	0xeffefffc

0800242c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0e9      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b76      	ldr	r3, [pc, #472]	; (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2207      	movs	r2, #7
 8002446:	4013      	ands	r3, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d91e      	bls.n	800248c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b73      	ldr	r3, [pc, #460]	; (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2207      	movs	r2, #7
 8002454:	4393      	bics	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	4b70      	ldr	r3, [pc, #448]	; (800261c <HAL_RCC_ClockConfig+0x1f0>)
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002460:	f7fe ff88 	bl	8001374 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002468:	e009      	b.n	800247e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246a:	f7fe ff83 	bl	8001374 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	4a6a      	ldr	r2, [pc, #424]	; (8002620 <HAL_RCC_ClockConfig+0x1f4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0ca      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2207      	movs	r2, #7
 8002484:	4013      	ands	r3, r2
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2202      	movs	r2, #2
 8002492:	4013      	ands	r3, r2
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2204      	movs	r2, #4
 800249c:	4013      	ands	r3, r2
 800249e:	d006      	beq.n	80024ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024a0:	4b60      	ldr	r3, [pc, #384]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024a6:	21e0      	movs	r1, #224	; 0xe0
 80024a8:	01c9      	lsls	r1, r1, #7
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ae:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4a5d      	ldr	r2, [pc, #372]	; (8002628 <HAL_RCC_ClockConfig+0x1fc>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d057      	beq.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d4:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	029b      	lsls	r3, r3, #10
 80024dc:	4013      	ands	r3, r2
 80024de:	d12b      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e097      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ec:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	049b      	lsls	r3, r3, #18
 80024f4:	4013      	ands	r3, r2
 80024f6:	d11f      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e08b      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4013      	ands	r3, r2
 800250e:	d113      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e07f      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d106      	bne.n	800252a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800251c:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002520:	2202      	movs	r2, #2
 8002522:	4013      	ands	r3, r2
 8002524:	d108      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e074      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	4b3e      	ldr	r3, [pc, #248]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e06d      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002538:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2207      	movs	r2, #7
 800253e:	4393      	bics	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800254c:	f7fe ff12 	bl	8001374 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002554:	e009      	b.n	800256a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002556:	f7fe ff0d 	bl	8001374 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	4a2f      	ldr	r2, [pc, #188]	; (8002620 <HAL_RCC_ClockConfig+0x1f4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e054      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	2238      	movs	r2, #56	; 0x38
 8002570:	401a      	ands	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	429a      	cmp	r2, r3
 800257a:	d1ec      	bne.n	8002556 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2207      	movs	r2, #7
 8002582:	4013      	ands	r3, r2
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d21e      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2207      	movs	r2, #7
 8002590:	4393      	bics	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_RCC_ClockConfig+0x1f0>)
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800259c:	f7fe feea 	bl	8001374 <HAL_GetTick>
 80025a0:	0003      	movs	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a4:	e009      	b.n	80025ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a6:	f7fe fee5 	bl	8001374 <HAL_GetTick>
 80025aa:	0002      	movs	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <HAL_RCC_ClockConfig+0x1f4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e02c      	b.n	8002614 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2207      	movs	r2, #7
 80025c0:	4013      	ands	r3, r2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1ee      	bne.n	80025a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2204      	movs	r2, #4
 80025ce:	4013      	ands	r3, r2
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4a15      	ldr	r2, [pc, #84]	; (800262c <HAL_RCC_ClockConfig+0x200>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025e6:	f000 f829 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80025ea:	0001      	movs	r1, r0
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCC_ClockConfig+0x1f8>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	220f      	movs	r2, #15
 80025f4:	401a      	ands	r2, r3
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x204>)
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	58d3      	ldr	r3, [r2, r3]
 80025fc:	221f      	movs	r2, #31
 80025fe:	4013      	ands	r3, r2
 8002600:	000a      	movs	r2, r1
 8002602:	40da      	lsrs	r2, r3
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_ClockConfig+0x208>)
 8002606:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_ClockConfig+0x20c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0018      	movs	r0, r3
 800260e:	f7fe fe55 	bl	80012bc <HAL_InitTick>
 8002612:	0003      	movs	r3, r0
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b004      	add	sp, #16
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40022000 	.word	0x40022000
 8002620:	00001388 	.word	0x00001388
 8002624:	40021000 	.word	0x40021000
 8002628:	fffff0ff 	.word	0xfffff0ff
 800262c:	ffff8fff 	.word	0xffff8fff
 8002630:	0800563c 	.word	0x0800563c
 8002634:	20000000 	.word	0x20000000
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	4b3c      	ldr	r3, [pc, #240]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2238      	movs	r2, #56	; 0x38
 8002648:	4013      	ands	r3, r2
 800264a:	d10f      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800264c:	4b39      	ldr	r3, [pc, #228]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0adb      	lsrs	r3, r3, #11
 8002652:	2207      	movs	r2, #7
 8002654:	4013      	ands	r3, r2
 8002656:	2201      	movs	r2, #1
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800265e:	6839      	ldr	r1, [r7, #0]
 8002660:	4835      	ldr	r0, [pc, #212]	; (8002738 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002662:	f7fd fd4d 	bl	8000100 <__udivsi3>
 8002666:	0003      	movs	r3, r0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e05d      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800266c:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2238      	movs	r2, #56	; 0x38
 8002672:	4013      	ands	r3, r2
 8002674:	2b08      	cmp	r3, #8
 8002676:	d102      	bne.n	800267e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002678:	4b30      	ldr	r3, [pc, #192]	; (800273c <HAL_RCC_GetSysClockFreq+0x100>)
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	e054      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267e:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2238      	movs	r2, #56	; 0x38
 8002684:	4013      	ands	r3, r2
 8002686:	2b10      	cmp	r3, #16
 8002688:	d138      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800268a:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2203      	movs	r2, #3
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	2207      	movs	r2, #7
 800269c:	4013      	ands	r3, r2
 800269e:	3301      	adds	r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	4824      	ldr	r0, [pc, #144]	; (800273c <HAL_RCC_GetSysClockFreq+0x100>)
 80026ac:	f7fd fd28 	bl	8000100 <__udivsi3>
 80026b0:	0003      	movs	r3, r0
 80026b2:	0019      	movs	r1, r3
 80026b4:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	227f      	movs	r2, #127	; 0x7f
 80026bc:	4013      	ands	r3, r2
 80026be:	434b      	muls	r3, r1
 80026c0:	617b      	str	r3, [r7, #20]
        break;
 80026c2:	e00d      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	481c      	ldr	r0, [pc, #112]	; (8002738 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026c8:	f7fd fd1a 	bl	8000100 <__udivsi3>
 80026cc:	0003      	movs	r3, r0
 80026ce:	0019      	movs	r1, r3
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	227f      	movs	r2, #127	; 0x7f
 80026d8:	4013      	ands	r3, r2
 80026da:	434b      	muls	r3, r1
 80026dc:	617b      	str	r3, [r7, #20]
        break;
 80026de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026e0:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	0f5b      	lsrs	r3, r3, #29
 80026e6:	2207      	movs	r2, #7
 80026e8:	4013      	ands	r3, r2
 80026ea:	3301      	adds	r3, #1
 80026ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	6978      	ldr	r0, [r7, #20]
 80026f2:	f7fd fd05 	bl	8000100 <__udivsi3>
 80026f6:	0003      	movs	r3, r0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	e015      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2238      	movs	r2, #56	; 0x38
 8002702:	4013      	ands	r3, r2
 8002704:	2b20      	cmp	r3, #32
 8002706:	d103      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2238      	movs	r2, #56	; 0x38
 8002716:	4013      	ands	r3, r2
 8002718:	2b18      	cmp	r3, #24
 800271a:	d103      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800271c:	23fa      	movs	r3, #250	; 0xfa
 800271e:	01db      	lsls	r3, r3, #7
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e001      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002728:	693b      	ldr	r3, [r7, #16]
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b006      	add	sp, #24
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	40021000 	.word	0x40021000
 8002738:	00f42400 	.word	0x00f42400
 800273c:	007a1200 	.word	0x007a1200

08002740 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002744:	4b02      	ldr	r3, [pc, #8]	; (8002750 <HAL_RCC_GetHCLKFreq+0x10>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	20000000 	.word	0x20000000

08002754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002754:	b5b0      	push	{r4, r5, r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002758:	f7ff fff2 	bl	8002740 <HAL_RCC_GetHCLKFreq>
 800275c:	0004      	movs	r4, r0
 800275e:	f7ff fb49 	bl	8001df4 <LL_RCC_GetAPB1Prescaler>
 8002762:	0003      	movs	r3, r0
 8002764:	0b1a      	lsrs	r2, r3, #12
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002768:	0092      	lsls	r2, r2, #2
 800276a:	58d3      	ldr	r3, [r2, r3]
 800276c:	221f      	movs	r2, #31
 800276e:	4013      	ands	r3, r2
 8002770:	40dc      	lsrs	r4, r3
 8002772:	0023      	movs	r3, r4
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	bdb0      	pop	{r4, r5, r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	0800567c 	.word	0x0800567c

08002780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002788:	2313      	movs	r3, #19
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002790:	2312      	movs	r3, #18
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	4013      	ands	r3, r2
 80027a2:	d100      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027a4:	e0a3      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a6:	2011      	movs	r0, #17
 80027a8:	183b      	adds	r3, r7, r0
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b86      	ldr	r3, [pc, #536]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	055b      	lsls	r3, r3, #21
 80027b6:	4013      	ands	r3, r2
 80027b8:	d110      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b83      	ldr	r3, [pc, #524]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027be:	4b82      	ldr	r3, [pc, #520]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	0549      	lsls	r1, r1, #21
 80027c4:	430a      	orrs	r2, r1
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80027c8:	4b7f      	ldr	r3, [pc, #508]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	055b      	lsls	r3, r3, #21
 80027d0:	4013      	ands	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d6:	183b      	adds	r3, r7, r0
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027dc:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b7a      	ldr	r3, [pc, #488]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027e2:	2180      	movs	r1, #128	; 0x80
 80027e4:	0049      	lsls	r1, r1, #1
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ea:	f7fe fdc3 	bl	8001374 <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f2:	e00b      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f4:	f7fe fdbe 	bl	8001374 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d904      	bls.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002802:	2313      	movs	r3, #19
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2203      	movs	r2, #3
 8002808:	701a      	strb	r2, [r3, #0]
        break;
 800280a:	e005      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280c:	4b6f      	ldr	r3, [pc, #444]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4013      	ands	r3, r2
 8002816:	d0ed      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002818:	2313      	movs	r3, #19
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d154      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002822:	4b69      	ldr	r3, [pc, #420]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002826:	23c0      	movs	r3, #192	; 0xc0
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4013      	ands	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d019      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	429a      	cmp	r2, r3
 800283c:	d014      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800283e:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	4a63      	ldr	r2, [pc, #396]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002844:	4013      	ands	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002848:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800284a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800284c:	4b5e      	ldr	r3, [pc, #376]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	0249      	lsls	r1, r1, #9
 8002852:	430a      	orrs	r2, r1
 8002854:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002856:	4b5c      	ldr	r3, [pc, #368]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800285a:	4b5b      	ldr	r3, [pc, #364]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800285c:	495d      	ldr	r1, [pc, #372]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800285e:	400a      	ands	r2, r1
 8002860:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002862:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2201      	movs	r2, #1
 800286c:	4013      	ands	r3, r2
 800286e:	d016      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fd80 	bl	8001374 <HAL_GetTick>
 8002874:	0003      	movs	r3, r0
 8002876:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002878:	e00c      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe fd7b 	bl	8001374 <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	4a54      	ldr	r2, [pc, #336]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d904      	bls.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800288a:	2313      	movs	r3, #19
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2203      	movs	r2, #3
 8002890:	701a      	strb	r2, [r3, #0]
            break;
 8002892:	e004      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002894:	4b4c      	ldr	r3, [pc, #304]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	2202      	movs	r2, #2
 800289a:	4013      	ands	r3, r2
 800289c:	d0ed      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800289e:	2313      	movs	r3, #19
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028a8:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	4a48      	ldr	r2, [pc, #288]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80028bc:	e00c      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028be:	2312      	movs	r3, #18
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	2213      	movs	r2, #19
 80028c4:	18ba      	adds	r2, r7, r2
 80028c6:	7812      	ldrb	r2, [r2, #0]
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e005      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028cc:	2312      	movs	r3, #18
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2213      	movs	r2, #19
 80028d2:	18ba      	adds	r2, r7, r2
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028d8:	2311      	movs	r3, #17
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028e8:	493c      	ldr	r1, [pc, #240]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028ea:	400a      	ands	r2, r1
 80028ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2201      	movs	r2, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	2203      	movs	r2, #3
 80028fe:	4393      	bics	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002908:	430a      	orrs	r2, r1
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	220c      	movs	r2, #12
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002926:	430a      	orrs	r2, r1
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2220      	movs	r2, #32
 8002930:	4013      	ands	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002934:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	4a29      	ldr	r2, [pc, #164]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002944:	430a      	orrs	r2, r1
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	01db      	lsls	r3, r3, #7
 8002950:	4013      	ands	r3, r2
 8002952:	d015      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002954:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	0899      	lsrs	r1, r3, #2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002962:	430a      	orrs	r2, r1
 8002964:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	05db      	lsls	r3, r3, #23
 800296e:	429a      	cmp	r2, r3
 8002970:	d106      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	0249      	lsls	r1, r1, #9
 800297c:	430a      	orrs	r2, r1
 800297e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	4013      	ands	r3, r2
 800298a:	d016      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002992:	4013      	ands	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800299c:	430a      	orrs	r2, r1
 800299e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	01db      	lsls	r3, r3, #7
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d106      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029b2:	2180      	movs	r1, #128	; 0x80
 80029b4:	0249      	lsls	r1, r1, #9
 80029b6:	430a      	orrs	r2, r1
 80029b8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80029ba:	2312      	movs	r3, #18
 80029bc:	18fb      	adds	r3, r7, r3
 80029be:	781b      	ldrb	r3, [r3, #0]
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b006      	add	sp, #24
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
 80029d0:	fffffcff 	.word	0xfffffcff
 80029d4:	fffeffff 	.word	0xfffeffff
 80029d8:	00001388 	.word	0x00001388
 80029dc:	efffffff 	.word	0xefffffff
 80029e0:	ffffcfff 	.word	0xffffcfff
 80029e4:	ffff3fff 	.word	0xffff3fff

080029e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0a8      	b.n	8002b4c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	2382      	movs	r3, #130	; 0x82
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d009      	beq.n	8002a22 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
 8002a14:	e005      	b.n	8002a22 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	225d      	movs	r2, #93	; 0x5d
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d107      	bne.n	8002a44 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	225c      	movs	r2, #92	; 0x5c
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fe f8ca 	bl	8000bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	225d      	movs	r2, #93	; 0x5d
 8002a48:	2102      	movs	r1, #2
 8002a4a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	438a      	bics	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	23e0      	movs	r3, #224	; 0xe0
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d902      	bls.n	8002a6e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e002      	b.n	8002a74 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a6e:	2380      	movs	r3, #128	; 0x80
 8002a70:	015b      	lsls	r3, r3, #5
 8002a72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	23f0      	movs	r3, #240	; 0xf0
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d008      	beq.n	8002a92 <HAL_SPI_Init+0xaa>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	23e0      	movs	r3, #224	; 0xe0
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d002      	beq.n	8002a92 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	2382      	movs	r3, #130	; 0x82
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	2384      	movs	r3, #132	; 0x84
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	2102      	movs	r1, #2
 8002aae:	400b      	ands	r3, r1
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	400b      	ands	r3, r1
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6999      	ldr	r1, [r3, #24]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	400b      	ands	r3, r1
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2138      	movs	r1, #56	; 0x38
 8002ace:	400b      	ands	r3, r1
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	400b      	ands	r3, r1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	0011      	movs	r1, r2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	019b      	lsls	r3, r3, #6
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	2204      	movs	r2, #4
 8002af8:	401a      	ands	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2110      	movs	r1, #16
 8002b00:	400b      	ands	r3, r1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	2108      	movs	r1, #8
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68d9      	ldr	r1, [r3, #12]
 8002b12:	23f0      	movs	r3, #240	; 0xf0
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	400b      	ands	r3, r1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	015b      	lsls	r3, r3, #5
 8002b22:	401a      	ands	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4907      	ldr	r1, [pc, #28]	; (8002b54 <HAL_SPI_Init+0x16c>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	225d      	movs	r2, #93	; 0x5d
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b004      	add	sp, #16
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	fffff7ff 	.word	0xfffff7ff

08002b58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	001a      	movs	r2, r3
 8002b76:	2301      	movs	r3, #1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d10f      	bne.n	8002b9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b82:	d00b      	beq.n	8002b9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	001a      	movs	r2, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d005      	beq.n	8002b9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	0010      	movs	r0, r2
 8002b98:	4798      	blx	r3
    return;
 8002b9a:	e0d5      	b.n	8002d48 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_SPI_IRQHandler+0x68>
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	09db      	lsrs	r3, r3, #7
 8002bac:	001a      	movs	r2, r3
 8002bae:	2301      	movs	r3, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d005      	beq.n	8002bc0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	0010      	movs	r0, r2
 8002bbc:	4798      	blx	r3
    return;
 8002bbe:	e0c3      	b.n	8002d48 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d10c      	bne.n	8002be6 <HAL_SPI_IRQHandler+0x8e>
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	099b      	lsrs	r3, r3, #6
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d106      	bne.n	8002be6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	001a      	movs	r2, r3
 8002bde:	2301      	movs	r3, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	d100      	bne.n	8002be6 <HAL_SPI_IRQHandler+0x8e>
 8002be4:	e0b0      	b.n	8002d48 <HAL_SPI_IRQHandler+0x1f0>
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	001a      	movs	r2, r3
 8002bec:	2301      	movs	r3, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d100      	bne.n	8002bf4 <HAL_SPI_IRQHandler+0x9c>
 8002bf2:	e0a9      	b.n	8002d48 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d023      	beq.n	8002c48 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	225d      	movs	r2, #93	; 0x5d
 8002c04:	5c9b      	ldrb	r3, [r3, r2]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d011      	beq.n	8002c30 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c10:	2204      	movs	r2, #4
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	e00b      	b.n	8002c48 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
        return;
 8002c46:	e07f      	b.n	8002d48 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	2301      	movs	r3, #1
 8002c50:	4013      	ands	r3, r2
 8002c52:	d014      	beq.n	8002c7e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c58:	2201      	movs	r2, #1
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	001a      	movs	r2, r3
 8002c84:	2301      	movs	r3, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	d00c      	beq.n	8002ca4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8e:	2208      	movs	r2, #8
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d04c      	beq.n	8002d46 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	21e0      	movs	r1, #224	; 0xe0
 8002cb8:	438a      	bics	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	225d      	movs	r2, #93	; 0x5d
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d103      	bne.n	8002cd4 <HAL_SPI_IRQHandler+0x17c>
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d032      	beq.n	8002d3a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2103      	movs	r1, #3
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d010      	beq.n	8002d0e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_SPI_IRQHandler+0x1f8>)
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7fe fd33 	bl	8001764 <HAL_DMA_Abort_IT>
 8002cfe:	1e03      	subs	r3, r0, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d06:	2240      	movs	r2, #64	; 0x40
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <HAL_SPI_IRQHandler+0x1f8>)
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7fe fd1e 	bl	8001764 <HAL_DMA_Abort_IT>
 8002d28:	1e03      	subs	r3, r0, #0
 8002d2a:	d00b      	beq.n	8002d44 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d30:	2240      	movs	r2, #64	; 0x40
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002d38:	e004      	b.n	8002d44 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 f809 	bl	8002d54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d42:	e000      	b.n	8002d46 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002d44:	46c0      	nop			; (mov r8, r8)
    return;
 8002d46:	46c0      	nop			; (mov r8, r8)
  }
}
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b008      	add	sp, #32
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	08002d65 	.word	0x08002d65

08002d54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2246      	movs	r2, #70	; 0x46
 8002d76:	2100      	movs	r1, #0
 8002d78:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff ffe6 	bl	8002d54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e04a      	b.n	8002e38 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	223d      	movs	r2, #61	; 0x3d
 8002da6:	5c9b      	ldrb	r3, [r3, r2]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d107      	bne.n	8002dbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223c      	movs	r2, #60	; 0x3c
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7fd ffe1 	bl	8000d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	223d      	movs	r2, #61	; 0x3d
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	0019      	movs	r1, r3
 8002dd0:	0010      	movs	r0, r2
 8002dd2:	f000 fa8b 	bl	80032ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2248      	movs	r2, #72	; 0x48
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	223e      	movs	r2, #62	; 0x3e
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	223f      	movs	r2, #63	; 0x3f
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2240      	movs	r2, #64	; 0x40
 8002df2:	2101      	movs	r1, #1
 8002df4:	5499      	strb	r1, [r3, r2]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2241      	movs	r2, #65	; 0x41
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	5499      	strb	r1, [r3, r2]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2242      	movs	r2, #66	; 0x42
 8002e02:	2101      	movs	r1, #1
 8002e04:	5499      	strb	r1, [r3, r2]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2243      	movs	r2, #67	; 0x43
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2244      	movs	r2, #68	; 0x44
 8002e12:	2101      	movs	r1, #1
 8002e14:	5499      	strb	r1, [r3, r2]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2245      	movs	r2, #69	; 0x45
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2246      	movs	r2, #70	; 0x46
 8002e22:	2101      	movs	r1, #1
 8002e24:	5499      	strb	r1, [r3, r2]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2247      	movs	r2, #71	; 0x47
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	223d      	movs	r2, #61	; 0x3d
 8002e32:	2101      	movs	r1, #1
 8002e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e04a      	b.n	8002ee8 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	223d      	movs	r2, #61	; 0x3d
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	223c      	movs	r2, #60	; 0x3c
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7fd ff09 	bl	8000c80 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	223d      	movs	r2, #61	; 0x3d
 8002e72:	2102      	movs	r1, #2
 8002e74:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	0019      	movs	r1, r3
 8002e80:	0010      	movs	r0, r2
 8002e82:	f000 fa33 	bl	80032ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2248      	movs	r2, #72	; 0x48
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	223e      	movs	r2, #62	; 0x3e
 8002e92:	2101      	movs	r1, #1
 8002e94:	5499      	strb	r1, [r3, r2]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	223f      	movs	r2, #63	; 0x3f
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	5499      	strb	r1, [r3, r2]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2240      	movs	r2, #64	; 0x40
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	5499      	strb	r1, [r3, r2]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2241      	movs	r2, #65	; 0x41
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2242      	movs	r2, #66	; 0x42
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2243      	movs	r2, #67	; 0x43
 8002eba:	2101      	movs	r1, #1
 8002ebc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2244      	movs	r2, #68	; 0x44
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	5499      	strb	r1, [r3, r2]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2245      	movs	r2, #69	; 0x45
 8002eca:	2101      	movs	r1, #1
 8002ecc:	5499      	strb	r1, [r3, r2]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2246      	movs	r2, #70	; 0x46
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	5499      	strb	r1, [r3, r2]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2247      	movs	r2, #71	; 0x47
 8002eda:	2101      	movs	r1, #1
 8002edc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	223d      	movs	r2, #61	; 0x3d
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b002      	add	sp, #8
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2202      	movs	r2, #2
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d124      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d11d      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	4252      	negs	r2, r2
 8002f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2203      	movs	r2, #3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 f9c2 	bl	80032bc <HAL_TIM_IC_CaptureCallback>
 8002f38:	e007      	b.n	8002f4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 f9b5 	bl	80032ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f000 f9c1 	bl	80032cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2204      	movs	r2, #4
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d125      	bne.n	8002faa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2204      	movs	r2, #4
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d11e      	bne.n	8002faa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2205      	movs	r2, #5
 8002f72:	4252      	negs	r2, r2
 8002f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	23c0      	movs	r3, #192	; 0xc0
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 f995 	bl	80032bc <HAL_TIM_IC_CaptureCallback>
 8002f92:	e007      	b.n	8002fa4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f000 f988 	bl	80032ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 f994 	bl	80032cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d124      	bne.n	8003002 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d11d      	bne.n	8003002 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2209      	movs	r2, #9
 8002fcc:	4252      	negs	r2, r2
 8002fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 f969 	bl	80032bc <HAL_TIM_IC_CaptureCallback>
 8002fea:	e007      	b.n	8002ffc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 f95c 	bl	80032ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 f968 	bl	80032cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2210      	movs	r2, #16
 800300a:	4013      	ands	r3, r2
 800300c:	2b10      	cmp	r3, #16
 800300e:	d125      	bne.n	800305c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2210      	movs	r2, #16
 8003018:	4013      	ands	r3, r2
 800301a:	2b10      	cmp	r3, #16
 800301c:	d11e      	bne.n	800305c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2211      	movs	r2, #17
 8003024:	4252      	negs	r2, r2
 8003026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2208      	movs	r2, #8
 800302c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	23c0      	movs	r3, #192	; 0xc0
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4013      	ands	r3, r2
 800303a:	d004      	beq.n	8003046 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0018      	movs	r0, r3
 8003040:	f000 f93c 	bl	80032bc <HAL_TIM_IC_CaptureCallback>
 8003044:	e007      	b.n	8003056 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	0018      	movs	r0, r3
 800304a:	f000 f92f 	bl	80032ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0018      	movs	r0, r3
 8003052:	f000 f93b 	bl	80032cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2201      	movs	r2, #1
 8003064:	4013      	ands	r3, r2
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10f      	bne.n	800308a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	4013      	ands	r3, r2
 8003074:	2b01      	cmp	r3, #1
 8003076:	d108      	bne.n	800308a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2202      	movs	r2, #2
 800307e:	4252      	negs	r2, r2
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 f909 	bl	800329c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	4013      	ands	r3, r2
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d10f      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b80      	cmp	r3, #128	; 0x80
 80030a4:	d108      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2281      	movs	r2, #129	; 0x81
 80030ac:	4252      	negs	r2, r2
 80030ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 fb20 	bl	80036f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	401a      	ands	r2, r3
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d10e      	bne.n	80030ea <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d107      	bne.n	80030ea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_TIM_IRQHandler+0x260>)
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 fb0f 	bl	8003708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d10f      	bne.n	8003118 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	4013      	ands	r3, r2
 8003102:	2b40      	cmp	r3, #64	; 0x40
 8003104:	d108      	bne.n	8003118 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2241      	movs	r2, #65	; 0x41
 800310c:	4252      	negs	r2, r2
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f8e2 	bl	80032dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2220      	movs	r2, #32
 8003120:	4013      	ands	r3, r2
 8003122:	2b20      	cmp	r3, #32
 8003124:	d10f      	bne.n	8003146 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	4013      	ands	r3, r2
 8003130:	2b20      	cmp	r3, #32
 8003132:	d108      	bne.n	8003146 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2221      	movs	r2, #33	; 0x21
 800313a:	4252      	negs	r2, r2
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	0018      	movs	r0, r3
 8003142:	f000 fad1 	bl	80036e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	46bd      	mov	sp, r7
 800314a:	b002      	add	sp, #8
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	fffffeff 	.word	0xfffffeff

08003154 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003160:	2317      	movs	r3, #23
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	223c      	movs	r2, #60	; 0x3c
 800316c:	5c9b      	ldrb	r3, [r3, r2]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_TIM_IC_ConfigChannel+0x22>
 8003172:	2302      	movs	r3, #2
 8003174:	e08c      	b.n	8003290 <HAL_TIM_IC_ConfigChannel+0x13c>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	223c      	movs	r2, #60	; 0x3c
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d11b      	bne.n	80031bc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6819      	ldr	r1, [r3, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f000 f920 	bl	80033d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	210c      	movs	r1, #12
 80031a4:	438a      	bics	r2, r1
 80031a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6999      	ldr	r1, [r3, #24]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	619a      	str	r2, [r3, #24]
 80031ba:	e062      	b.n	8003282 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d11c      	bne.n	80031fc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f000 f959 	bl	8003488 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	492d      	ldr	r1, [pc, #180]	; (8003298 <HAL_TIM_IC_ConfigChannel+0x144>)
 80031e2:	400a      	ands	r2, r1
 80031e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6999      	ldr	r1, [r3, #24]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	021a      	lsls	r2, r3, #8
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	619a      	str	r2, [r3, #24]
 80031fa:	e042      	b.n	8003282 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d11b      	bne.n	800323a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f000 f97b 	bl	800350c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69da      	ldr	r2, [r3, #28]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	210c      	movs	r1, #12
 8003222:	438a      	bics	r2, r1
 8003224:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69d9      	ldr	r1, [r3, #28]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	61da      	str	r2, [r3, #28]
 8003238:	e023      	b.n	8003282 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d11c      	bne.n	800327a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f000 f99c 	bl	800358c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003260:	400a      	ands	r2, r1
 8003262:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69d9      	ldr	r1, [r3, #28]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	021a      	lsls	r2, r3, #8
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	61da      	str	r2, [r3, #28]
 8003278:	e003      	b.n	8003282 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800327a:	2317      	movs	r3, #23
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	223c      	movs	r2, #60	; 0x3c
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]

  return status;
 800328a:	2317      	movs	r3, #23
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	781b      	ldrb	r3, [r3, #0]
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b006      	add	sp, #24
 8003296:	bd80      	pop	{r7, pc}
 8003298:	fffff3ff 	.word	0xfffff3ff

0800329c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b002      	add	sp, #8
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032c4:	46c0      	nop			; (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}

080032ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a2f      	ldr	r2, [pc, #188]	; (80033bc <TIM_Base_SetConfig+0xd0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_Base_SetConfig+0x20>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a2e      	ldr	r2, [pc, #184]	; (80033c0 <TIM_Base_SetConfig+0xd4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2270      	movs	r2, #112	; 0x70
 8003310:	4393      	bics	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a26      	ldr	r2, [pc, #152]	; (80033bc <TIM_Base_SetConfig+0xd0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <TIM_Base_SetConfig+0x62>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <TIM_Base_SetConfig+0xd4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00f      	beq.n	800334e <TIM_Base_SetConfig+0x62>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a24      	ldr	r2, [pc, #144]	; (80033c4 <TIM_Base_SetConfig+0xd8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00b      	beq.n	800334e <TIM_Base_SetConfig+0x62>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a23      	ldr	r2, [pc, #140]	; (80033c8 <TIM_Base_SetConfig+0xdc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <TIM_Base_SetConfig+0x62>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a22      	ldr	r2, [pc, #136]	; (80033cc <TIM_Base_SetConfig+0xe0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <TIM_Base_SetConfig+0x62>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a21      	ldr	r2, [pc, #132]	; (80033d0 <TIM_Base_SetConfig+0xe4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d108      	bne.n	8003360 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a20      	ldr	r2, [pc, #128]	; (80033d4 <TIM_Base_SetConfig+0xe8>)
 8003352:	4013      	ands	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	4393      	bics	r3, r2
 8003366:	001a      	movs	r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <TIM_Base_SetConfig+0xd0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00b      	beq.n	80033a6 <TIM_Base_SetConfig+0xba>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a0d      	ldr	r2, [pc, #52]	; (80033c8 <TIM_Base_SetConfig+0xdc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <TIM_Base_SetConfig+0xba>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <TIM_Base_SetConfig+0xe0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <TIM_Base_SetConfig+0xba>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <TIM_Base_SetConfig+0xe4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d103      	bne.n	80033ae <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	615a      	str	r2, [r3, #20]
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40012c00 	.word	0x40012c00
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40002000 	.word	0x40002000
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800
 80033d4:	fffffcff 	.word	0xfffffcff

080033d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4393      	bics	r3, r2
 80033ee:	001a      	movs	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a1e      	ldr	r2, [pc, #120]	; (800347c <TIM_TI1_SetConfig+0xa4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d007      	beq.n	8003418 <TIM_TI1_SetConfig+0x40>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <TIM_TI1_SetConfig+0xa8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_TI1_SetConfig+0x40>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <TIM_TI1_SetConfig+0xac>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d101      	bne.n	800341c <TIM_TI1_SetConfig+0x44>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <TIM_TI1_SetConfig+0x46>
 800341c:	2300      	movs	r3, #0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2203      	movs	r2, #3
 8003426:	4393      	bics	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e003      	b.n	800343c <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2201      	movs	r2, #1
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	22f0      	movs	r2, #240	; 0xf0
 8003440:	4393      	bics	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	22ff      	movs	r2, #255	; 0xff
 800344a:	4013      	ands	r3, r2
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	220a      	movs	r2, #10
 8003456:	4393      	bics	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	220a      	movs	r2, #10
 800345e:	4013      	ands	r3, r2
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	46bd      	mov	sp, r7
 8003476:	b006      	add	sp, #24
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40000400 	.word	0x40000400
 8003484:	40014000 	.word	0x40014000

08003488 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	2210      	movs	r2, #16
 800349c:	4393      	bics	r3, r2
 800349e:	001a      	movs	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	4a14      	ldr	r2, [pc, #80]	; (8003504 <TIM_TI2_SetConfig+0x7c>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	4a10      	ldr	r2, [pc, #64]	; (8003508 <TIM_TI2_SetConfig+0x80>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	031b      	lsls	r3, r3, #12
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	22a0      	movs	r2, #160	; 0xa0
 80034dc:	4393      	bics	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	22a0      	movs	r2, #160	; 0xa0
 80034e6:	4013      	ands	r3, r2
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b006      	add	sp, #24
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	fffffcff 	.word	0xfffffcff
 8003508:	ffff0fff 	.word	0xffff0fff

0800350c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4a19      	ldr	r2, [pc, #100]	; (8003584 <TIM_TI3_SetConfig+0x78>)
 8003520:	401a      	ands	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2203      	movs	r2, #3
 8003536:	4393      	bics	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	22f0      	movs	r2, #240	; 0xf0
 8003546:	4393      	bics	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	22ff      	movs	r2, #255	; 0xff
 8003550:	4013      	ands	r3, r2
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <TIM_TI3_SetConfig+0x7c>)
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	021a      	lsls	r2, r3, #8
 8003564:	23a0      	movs	r3, #160	; 0xa0
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	4013      	ands	r3, r2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	621a      	str	r2, [r3, #32]
}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b006      	add	sp, #24
 8003582:	bd80      	pop	{r7, pc}
 8003584:	fffffeff 	.word	0xfffffeff
 8003588:	fffff5ff 	.word	0xfffff5ff

0800358c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4a1a      	ldr	r2, [pc, #104]	; (8003608 <TIM_TI4_SetConfig+0x7c>)
 80035a0:	401a      	ands	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	4a15      	ldr	r2, [pc, #84]	; (800360c <TIM_TI4_SetConfig+0x80>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <TIM_TI4_SetConfig+0x84>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	031b      	lsls	r3, r3, #12
 80035d0:	041b      	lsls	r3, r3, #16
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <TIM_TI4_SetConfig+0x88>)
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	031a      	lsls	r2, r3, #12
 80035e6:	23a0      	movs	r3, #160	; 0xa0
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	4013      	ands	r3, r2
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	621a      	str	r2, [r3, #32]
}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b006      	add	sp, #24
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	ffffefff 	.word	0xffffefff
 800360c:	fffffcff 	.word	0xfffffcff
 8003610:	ffff0fff 	.word	0xffff0fff
 8003614:	ffff5fff 	.word	0xffff5fff

08003618 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	223c      	movs	r2, #60	; 0x3c
 8003626:	5c9b      	ldrb	r3, [r3, r2]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800362c:	2302      	movs	r3, #2
 800362e:	e04f      	b.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	223c      	movs	r2, #60	; 0x3c
 8003634:	2101      	movs	r1, #1
 8003636:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	223d      	movs	r2, #61	; 0x3d
 800363c:	2102      	movs	r1, #2
 800363e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a20      	ldr	r2, [pc, #128]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800365e:	4013      	ands	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2270      	movs	r2, #112	; 0x70
 8003670:	4393      	bics	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10c      	bne.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	4393      	bics	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	223d      	movs	r2, #61	; 0x3d
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	223c      	movs	r2, #60	; 0x3c
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b004      	add	sp, #16
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	ff0fffff 	.word	0xff0fffff
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40014000 	.word	0x40014000

080036e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b002      	add	sp, #8
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	46bd      	mov	sp, r7
 8003704:	b002      	add	sp, #8
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	b002      	add	sp, #8
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e046      	b.n	80037b8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2288      	movs	r2, #136	; 0x88
 800372e:	589b      	ldr	r3, [r3, r2]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2284      	movs	r2, #132	; 0x84
 8003738:	2100      	movs	r1, #0
 800373a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f7fd fb82 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2288      	movs	r2, #136	; 0x88
 8003748:	2124      	movs	r1, #36	; 0x24
 800374a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2101      	movs	r1, #1
 8003758:	438a      	bics	r2, r1
 800375a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	0018      	movs	r0, r3
 8003760:	f000 fc66 	bl	8004030 <UART_SetConfig>
 8003764:	0003      	movs	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e024      	b.n	80037b8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0018      	movs	r0, r3
 800377a:	f000 fdfd 	bl	8004378 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	490d      	ldr	r1, [pc, #52]	; (80037c0 <HAL_UART_Init+0xa8>)
 800378a:	400a      	ands	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	212a      	movs	r1, #42	; 0x2a
 800379a:	438a      	bics	r2, r1
 800379c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	430a      	orrs	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 fe95 	bl	80044e0 <UART_CheckIdleState>
 80037b6:	0003      	movs	r3, r0
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b002      	add	sp, #8
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	ffffb7ff 	.word	0xffffb7ff

080037c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	1dbb      	adds	r3, r7, #6
 80037d2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2288      	movs	r2, #136	; 0x88
 80037d8:	589b      	ldr	r3, [r3, r2]
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d000      	beq.n	80037e0 <HAL_UART_Transmit+0x1c>
 80037de:	e088      	b.n	80038f2 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_UART_Transmit+0x2a>
 80037e6:	1dbb      	adds	r3, r7, #6
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e080      	b.n	80038f4 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	015b      	lsls	r3, r3, #5
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d109      	bne.n	8003812 <HAL_UART_Transmit+0x4e>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d105      	bne.n	8003812 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2201      	movs	r2, #1
 800380a:	4013      	ands	r3, r2
 800380c:	d001      	beq.n	8003812 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e070      	b.n	80038f4 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2290      	movs	r2, #144	; 0x90
 8003816:	2100      	movs	r1, #0
 8003818:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2288      	movs	r2, #136	; 0x88
 800381e:	2121      	movs	r1, #33	; 0x21
 8003820:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003822:	f7fd fda7 	bl	8001374 <HAL_GetTick>
 8003826:	0003      	movs	r3, r0
 8003828:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1dba      	adds	r2, r7, #6
 800382e:	2154      	movs	r1, #84	; 0x54
 8003830:	8812      	ldrh	r2, [r2, #0]
 8003832:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1dba      	adds	r2, r7, #6
 8003838:	2156      	movs	r1, #86	; 0x56
 800383a:	8812      	ldrh	r2, [r2, #0]
 800383c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	015b      	lsls	r3, r3, #5
 8003846:	429a      	cmp	r2, r3
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x98>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003864:	e02c      	b.n	80038c0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	0013      	movs	r3, r2
 8003870:	2200      	movs	r2, #0
 8003872:	2180      	movs	r1, #128	; 0x80
 8003874:	f000 fe82 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 8003878:	1e03      	subs	r3, r0, #0
 800387a:	d001      	beq.n	8003880 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e039      	b.n	80038f4 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10b      	bne.n	800389e <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	001a      	movs	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	05d2      	lsls	r2, r2, #23
 8003892:	0dd2      	lsrs	r2, r2, #23
 8003894:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	3302      	adds	r3, #2
 800389a:	61bb      	str	r3, [r7, #24]
 800389c:	e007      	b.n	80038ae <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	3301      	adds	r3, #1
 80038ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2256      	movs	r2, #86	; 0x56
 80038b2:	5a9b      	ldrh	r3, [r3, r2]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b299      	uxth	r1, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2256      	movs	r2, #86	; 0x56
 80038be:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2256      	movs	r2, #86	; 0x56
 80038c4:	5a9b      	ldrh	r3, [r3, r2]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1cc      	bne.n	8003866 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	0013      	movs	r3, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	2140      	movs	r1, #64	; 0x40
 80038da:	f000 fe4f 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 80038de:	1e03      	subs	r3, r0, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e006      	b.n	80038f4 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2288      	movs	r2, #136	; 0x88
 80038ea:	2120      	movs	r1, #32
 80038ec:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	e000      	b.n	80038f4 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80038f2:	2302      	movs	r3, #2
  }
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b008      	add	sp, #32
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	228c      	movs	r2, #140	; 0x8c
 800390e:	589b      	ldr	r3, [r3, r2]
 8003910:	2b20      	cmp	r3, #32
 8003912:	d145      	bne.n	80039a0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_UART_Receive_IT+0x26>
 800391a:	1dbb      	adds	r3, r7, #6
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e03d      	b.n	80039a2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	015b      	lsls	r3, r3, #5
 800392e:	429a      	cmp	r2, r3
 8003930:	d109      	bne.n	8003946 <HAL_UART_Receive_IT+0x4a>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d105      	bne.n	8003946 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2201      	movs	r2, #1
 800393e:	4013      	ands	r3, r2
 8003940:	d001      	beq.n	8003946 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e02d      	b.n	80039a2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	4013      	ands	r3, r2
 8003958:	d019      	beq.n	800398e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	613b      	str	r3, [r7, #16]
  return(result);
 8003960:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	04c9      	lsls	r1, r1, #19
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800398e:	1dbb      	adds	r3, r7, #6
 8003990:	881a      	ldrh	r2, [r3, #0]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	0018      	movs	r0, r3
 8003998:	f000 feb8 	bl	800470c <UART_Start_Receive_IT>
 800399c:	0003      	movs	r3, r0
 800399e:	e000      	b.n	80039a2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
  }
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b008      	add	sp, #32
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039ac:	b5b0      	push	{r4, r5, r7, lr}
 80039ae:	b0aa      	sub	sp, #168	; 0xa8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	22a4      	movs	r2, #164	; 0xa4
 80039bc:	18b9      	adds	r1, r7, r2
 80039be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	20a0      	movs	r0, #160	; 0xa0
 80039c8:	1839      	adds	r1, r7, r0
 80039ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	249c      	movs	r4, #156	; 0x9c
 80039d4:	1939      	adds	r1, r7, r4
 80039d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039d8:	0011      	movs	r1, r2
 80039da:	18bb      	adds	r3, r7, r2
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4aa2      	ldr	r2, [pc, #648]	; (8003c68 <HAL_UART_IRQHandler+0x2bc>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	2298      	movs	r2, #152	; 0x98
 80039e4:	18bd      	adds	r5, r7, r2
 80039e6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80039e8:	18bb      	adds	r3, r7, r2
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d11a      	bne.n	8003a26 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039f0:	187b      	adds	r3, r7, r1
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2220      	movs	r2, #32
 80039f6:	4013      	ands	r3, r2
 80039f8:	d015      	beq.n	8003a26 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2220      	movs	r2, #32
 8003a00:	4013      	ands	r3, r2
 8003a02:	d105      	bne.n	8003a10 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	055b      	lsls	r3, r3, #21
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d00a      	beq.n	8003a26 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d100      	bne.n	8003a1a <HAL_UART_IRQHandler+0x6e>
 8003a18:	e2dc      	b.n	8003fd4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	0010      	movs	r0, r2
 8003a22:	4798      	blx	r3
      }
      return;
 8003a24:	e2d6      	b.n	8003fd4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a26:	2398      	movs	r3, #152	; 0x98
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d100      	bne.n	8003a32 <HAL_UART_IRQHandler+0x86>
 8003a30:	e122      	b.n	8003c78 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003a32:	239c      	movs	r3, #156	; 0x9c
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a8c      	ldr	r2, [pc, #560]	; (8003c6c <HAL_UART_IRQHandler+0x2c0>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d106      	bne.n	8003a4c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003a3e:	23a0      	movs	r3, #160	; 0xa0
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a8a      	ldr	r2, [pc, #552]	; (8003c70 <HAL_UART_IRQHandler+0x2c4>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	d100      	bne.n	8003a4c <HAL_UART_IRQHandler+0xa0>
 8003a4a:	e115      	b.n	8003c78 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a4c:	23a4      	movs	r3, #164	; 0xa4
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2201      	movs	r2, #1
 8003a54:	4013      	ands	r3, r2
 8003a56:	d012      	beq.n	8003a7e <HAL_UART_IRQHandler+0xd2>
 8003a58:	23a0      	movs	r3, #160	; 0xa0
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4013      	ands	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2290      	movs	r2, #144	; 0x90
 8003a72:	589b      	ldr	r3, [r3, r2]
 8003a74:	2201      	movs	r2, #1
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2190      	movs	r1, #144	; 0x90
 8003a7c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a7e:	23a4      	movs	r3, #164	; 0xa4
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2202      	movs	r2, #2
 8003a86:	4013      	ands	r3, r2
 8003a88:	d011      	beq.n	8003aae <HAL_UART_IRQHandler+0x102>
 8003a8a:	239c      	movs	r3, #156	; 0x9c
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2201      	movs	r2, #1
 8003a92:	4013      	ands	r3, r2
 8003a94:	d00b      	beq.n	8003aae <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2290      	movs	r2, #144	; 0x90
 8003aa2:	589b      	ldr	r3, [r3, r2]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2190      	movs	r1, #144	; 0x90
 8003aac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aae:	23a4      	movs	r3, #164	; 0xa4
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d011      	beq.n	8003ade <HAL_UART_IRQHandler+0x132>
 8003aba:	239c      	movs	r3, #156	; 0x9c
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2204      	movs	r2, #4
 8003acc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2290      	movs	r2, #144	; 0x90
 8003ad2:	589b      	ldr	r3, [r3, r2]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2190      	movs	r1, #144	; 0x90
 8003adc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ade:	23a4      	movs	r3, #164	; 0xa4
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d017      	beq.n	8003b1a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003aea:	23a0      	movs	r3, #160	; 0xa0
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2220      	movs	r2, #32
 8003af2:	4013      	ands	r3, r2
 8003af4:	d105      	bne.n	8003b02 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003af6:	239c      	movs	r3, #156	; 0x9c
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a5b      	ldr	r2, [pc, #364]	; (8003c6c <HAL_UART_IRQHandler+0x2c0>)
 8003afe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b00:	d00b      	beq.n	8003b1a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2208      	movs	r2, #8
 8003b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2290      	movs	r2, #144	; 0x90
 8003b0e:	589b      	ldr	r3, [r3, r2]
 8003b10:	2208      	movs	r2, #8
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2190      	movs	r1, #144	; 0x90
 8003b18:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b1a:	23a4      	movs	r3, #164	; 0xa4
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4013      	ands	r3, r2
 8003b26:	d013      	beq.n	8003b50 <HAL_UART_IRQHandler+0x1a4>
 8003b28:	23a0      	movs	r3, #160	; 0xa0
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	04db      	lsls	r3, r3, #19
 8003b32:	4013      	ands	r3, r2
 8003b34:	d00c      	beq.n	8003b50 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2280      	movs	r2, #128	; 0x80
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2290      	movs	r2, #144	; 0x90
 8003b44:	589b      	ldr	r3, [r3, r2]
 8003b46:	2220      	movs	r2, #32
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2190      	movs	r1, #144	; 0x90
 8003b4e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2290      	movs	r2, #144	; 0x90
 8003b54:	589b      	ldr	r3, [r3, r2]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d100      	bne.n	8003b5c <HAL_UART_IRQHandler+0x1b0>
 8003b5a:	e23d      	b.n	8003fd8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b5c:	23a4      	movs	r3, #164	; 0xa4
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2220      	movs	r2, #32
 8003b64:	4013      	ands	r3, r2
 8003b66:	d015      	beq.n	8003b94 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b68:	23a0      	movs	r3, #160	; 0xa0
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	4013      	ands	r3, r2
 8003b72:	d106      	bne.n	8003b82 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b74:	239c      	movs	r3, #156	; 0x9c
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	055b      	lsls	r3, r3, #21
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d008      	beq.n	8003b94 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d004      	beq.n	8003b94 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	0010      	movs	r0, r2
 8003b92:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2290      	movs	r2, #144	; 0x90
 8003b98:	589b      	ldr	r3, [r3, r2]
 8003b9a:	2194      	movs	r1, #148	; 0x94
 8003b9c:	187a      	adds	r2, r7, r1
 8003b9e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2240      	movs	r2, #64	; 0x40
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d004      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bae:	187b      	adds	r3, r7, r1
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2228      	movs	r2, #40	; 0x28
 8003bb4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bb6:	d04c      	beq.n	8003c52 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f000 feca 	bl	8004954 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2240      	movs	r2, #64	; 0x40
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d13c      	bne.n	8003c48 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bce:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd6:	2090      	movs	r0, #144	; 0x90
 8003bd8:	183a      	adds	r2, r7, r0
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	2301      	movs	r3, #1
 8003bde:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2140      	movs	r1, #64	; 0x40
 8003bf4:	438a      	bics	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	183b      	adds	r3, r7, r0
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c00:	f383 8810 	msr	PRIMASK, r3
}
 8003c04:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2280      	movs	r2, #128	; 0x80
 8003c0a:	589b      	ldr	r3, [r3, r2]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d016      	beq.n	8003c3e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	589b      	ldr	r3, [r3, r2]
 8003c16:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <HAL_UART_IRQHandler+0x2c8>)
 8003c18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	589b      	ldr	r3, [r3, r2]
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7fd fd9f 	bl	8001764 <HAL_DMA_Abort_IT>
 8003c26:	1e03      	subs	r3, r0, #0
 8003c28:	d01c      	beq.n	8003c64 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2280      	movs	r2, #128	; 0x80
 8003c2e:	589b      	ldr	r3, [r3, r2]
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	2180      	movs	r1, #128	; 0x80
 8003c36:	5852      	ldr	r2, [r2, r1]
 8003c38:	0010      	movs	r0, r2
 8003c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e012      	b.n	8003c64 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 f9e1 	bl	8004008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c46:	e00d      	b.n	8003c64 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f000 f9dc 	bl	8004008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e008      	b.n	8003c64 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f9d7 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2290      	movs	r2, #144	; 0x90
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003c62:	e1b9      	b.n	8003fd8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	46c0      	nop			; (mov r8, r8)
    return;
 8003c66:	e1b7      	b.n	8003fd8 <HAL_UART_IRQHandler+0x62c>
 8003c68:	0000080f 	.word	0x0000080f
 8003c6c:	10000001 	.word	0x10000001
 8003c70:	04000120 	.word	0x04000120
 8003c74:	08004a21 	.word	0x08004a21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d000      	beq.n	8003c82 <HAL_UART_IRQHandler+0x2d6>
 8003c80:	e13e      	b.n	8003f00 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c82:	23a4      	movs	r3, #164	; 0xa4
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d100      	bne.n	8003c90 <HAL_UART_IRQHandler+0x2e4>
 8003c8e:	e137      	b.n	8003f00 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c90:	23a0      	movs	r3, #160	; 0xa0
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2210      	movs	r2, #16
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <HAL_UART_IRQHandler+0x2f2>
 8003c9c:	e130      	b.n	8003f00 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2240      	movs	r2, #64	; 0x40
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d000      	beq.n	8003cb6 <HAL_UART_IRQHandler+0x30a>
 8003cb4:	e0a4      	b.n	8003e00 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	589b      	ldr	r3, [r3, r2]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	217e      	movs	r1, #126	; 0x7e
 8003cc2:	187b      	adds	r3, r7, r1
 8003cc4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d100      	bne.n	8003cd0 <HAL_UART_IRQHandler+0x324>
 8003cce:	e185      	b.n	8003fdc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	225c      	movs	r2, #92	; 0x5c
 8003cd4:	5a9b      	ldrh	r3, [r3, r2]
 8003cd6:	187a      	adds	r2, r7, r1
 8003cd8:	8812      	ldrh	r2, [r2, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d300      	bcc.n	8003ce0 <HAL_UART_IRQHandler+0x334>
 8003cde:	e17d      	b.n	8003fdc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	187a      	adds	r2, r7, r1
 8003ce4:	215e      	movs	r1, #94	; 0x5e
 8003ce6:	8812      	ldrh	r2, [r2, #0]
 8003ce8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2280      	movs	r2, #128	; 0x80
 8003cee:	589b      	ldr	r3, [r3, r2]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d170      	bne.n	8003ddc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d02:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d04:	2301      	movs	r3, #1
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0a:	f383 8810 	msr	PRIMASK, r3
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	49b4      	ldr	r1, [pc, #720]	; (8003fec <HAL_UART_IRQHandler+0x640>)
 8003d1c:	400a      	ands	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	f383 8810 	msr	PRIMASK, r3
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d34:	677b      	str	r3, [r7, #116]	; 0x74
 8003d36:	2301      	movs	r3, #1
 8003d38:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	438a      	bics	r2, r1
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d54:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d58:	f383 8810 	msr	PRIMASK, r3
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d62:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	673b      	str	r3, [r7, #112]	; 0x70
 8003d68:	2301      	movs	r3, #1
 8003d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	f383 8810 	msr	PRIMASK, r3
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2140      	movs	r1, #64	; 0x40
 8003d80:	438a      	bics	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d86:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8a:	f383 8810 	msr	PRIMASK, r3
}
 8003d8e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	228c      	movs	r2, #140	; 0x8c
 8003d94:	2120      	movs	r1, #32
 8003d96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003da2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003da8:	2301      	movs	r3, #1
 8003daa:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dae:	f383 8810 	msr	PRIMASK, r3
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2110      	movs	r1, #16
 8003dc0:	438a      	bics	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dca:	f383 8810 	msr	PRIMASK, r3
}
 8003dce:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	589b      	ldr	r3, [r3, r2]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fd fc62 	bl	80016a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	225c      	movs	r2, #92	; 0x5c
 8003de6:	5a9a      	ldrh	r2, [r3, r2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	215e      	movs	r1, #94	; 0x5e
 8003dec:	5a5b      	ldrh	r3, [r3, r1]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0011      	movs	r1, r2
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f000 f90d 	bl	8004018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003dfe:	e0ed      	b.n	8003fdc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	225c      	movs	r2, #92	; 0x5c
 8003e04:	5a99      	ldrh	r1, [r3, r2]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	225e      	movs	r2, #94	; 0x5e
 8003e0a:	5a9b      	ldrh	r3, [r3, r2]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	208e      	movs	r0, #142	; 0x8e
 8003e10:	183b      	adds	r3, r7, r0
 8003e12:	1a8a      	subs	r2, r1, r2
 8003e14:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	225e      	movs	r2, #94	; 0x5e
 8003e1a:	5a9b      	ldrh	r3, [r3, r2]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d100      	bne.n	8003e24 <HAL_UART_IRQHandler+0x478>
 8003e22:	e0dd      	b.n	8003fe0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003e24:	183b      	adds	r3, r7, r0
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d100      	bne.n	8003e2e <HAL_UART_IRQHandler+0x482>
 8003e2c:	e0d8      	b.n	8003fe0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e32:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e34:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e36:	2488      	movs	r4, #136	; 0x88
 8003e38:	193a      	adds	r2, r7, r4
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f383 8810 	msr	PRIMASK, r3
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4967      	ldr	r1, [pc, #412]	; (8003ff0 <HAL_UART_IRQHandler+0x644>)
 8003e54:	400a      	ands	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	193b      	adds	r3, r7, r4
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f383 8810 	msr	PRIMASK, r3
}
 8003e64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e66:	f3ef 8310 	mrs	r3, PRIMASK
 8003e6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e6c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e6e:	2484      	movs	r4, #132	; 0x84
 8003e70:	193a      	adds	r2, r7, r4
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	2301      	movs	r3, #1
 8003e76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f383 8810 	msr	PRIMASK, r3
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	495a      	ldr	r1, [pc, #360]	; (8003ff4 <HAL_UART_IRQHandler+0x648>)
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	193b      	adds	r3, r7, r4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f383 8810 	msr	PRIMASK, r3
}
 8003e9c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	228c      	movs	r2, #140	; 0x8c
 8003ea2:	2120      	movs	r1, #32
 8003ea4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eba:	2480      	movs	r4, #128	; 0x80
 8003ebc:	193a      	adds	r2, r7, r4
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	f383 8810 	msr	PRIMASK, r3
}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2110      	movs	r1, #16
 8003ed8:	438a      	bics	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	193b      	adds	r3, r7, r4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	f383 8810 	msr	PRIMASK, r3
}
 8003ee8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ef0:	183b      	adds	r3, r7, r0
 8003ef2:	881a      	ldrh	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	0011      	movs	r1, r2
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 f88d 	bl	8004018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003efe:	e06f      	b.n	8003fe0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f00:	23a4      	movs	r3, #164	; 0xa4
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	035b      	lsls	r3, r3, #13
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d010      	beq.n	8003f30 <HAL_UART_IRQHandler+0x584>
 8003f0e:	239c      	movs	r3, #156	; 0x9c
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	03db      	lsls	r3, r3, #15
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d009      	beq.n	8003f30 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	0352      	lsls	r2, r2, #13
 8003f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f001 fa1d 	bl	8005368 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f2e:	e05a      	b.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003f30:	23a4      	movs	r3, #164	; 0xa4
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d016      	beq.n	8003f6a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003f3c:	23a0      	movs	r3, #160	; 0xa0
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	4013      	ands	r3, r2
 8003f46:	d106      	bne.n	8003f56 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003f48:	239c      	movs	r3, #156	; 0x9c
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	2380      	movs	r3, #128	; 0x80
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	4013      	ands	r3, r2
 8003f54:	d009      	beq.n	8003f6a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d042      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	0010      	movs	r0, r2
 8003f66:	4798      	blx	r3
    }
    return;
 8003f68:	e03c      	b.n	8003fe4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f6a:	23a4      	movs	r3, #164	; 0xa4
 8003f6c:	18fb      	adds	r3, r7, r3
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2240      	movs	r2, #64	; 0x40
 8003f72:	4013      	ands	r3, r2
 8003f74:	d00a      	beq.n	8003f8c <HAL_UART_IRQHandler+0x5e0>
 8003f76:	23a0      	movs	r3, #160	; 0xa0
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2240      	movs	r2, #64	; 0x40
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 fd62 	bl	8004a4e <UART_EndTransmit_IT>
    return;
 8003f8a:	e02c      	b.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003f8c:	23a4      	movs	r3, #164	; 0xa4
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	4013      	ands	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x606>
 8003f9a:	23a0      	movs	r3, #160	; 0xa0
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	05db      	lsls	r3, r3, #23
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	0018      	movs	r0, r3
 8003fac:	f001 f9ec 	bl	8005388 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fb0:	e019      	b.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003fb2:	23a4      	movs	r3, #164	; 0xa4
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	045b      	lsls	r3, r3, #17
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d012      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
 8003fc0:	23a0      	movs	r3, #160	; 0xa0
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	da0d      	bge.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f001 f9d3 	bl	8005378 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fd2:	e008      	b.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
      return;
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	e006      	b.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
    return;
 8003fd8:	46c0      	nop			; (mov r8, r8)
 8003fda:	e004      	b.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
      return;
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	e002      	b.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
      return;
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	e000      	b.n	8003fe6 <HAL_UART_IRQHandler+0x63a>
    return;
 8003fe4:	46c0      	nop			; (mov r8, r8)
  }
}
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b02a      	add	sp, #168	; 0xa8
 8003fea:	bdb0      	pop	{r4, r5, r7, pc}
 8003fec:	fffffeff 	.word	0xfffffeff
 8003ff0:	fffffedf 	.word	0xfffffedf
 8003ff4:	effffffe 	.word	0xeffffffe

08003ff8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b002      	add	sp, #8
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004010:	46c0      	nop			; (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	b002      	add	sp, #8
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	000a      	movs	r2, r1
 8004022:	1cbb      	adds	r3, r7, #2
 8004024:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b002      	add	sp, #8
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004038:	231a      	movs	r3, #26
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4313      	orrs	r3, r2
 8004056:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4abc      	ldr	r2, [pc, #752]	; (8004350 <UART_SetConfig+0x320>)
 8004060:	4013      	ands	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	430a      	orrs	r2, r1
 800406c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4ab7      	ldr	r2, [pc, #732]	; (8004354 <UART_SetConfig+0x324>)
 8004076:	4013      	ands	r3, r2
 8004078:	0019      	movs	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	4313      	orrs	r3, r2
 8004094:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4aae      	ldr	r2, [pc, #696]	; (8004358 <UART_SetConfig+0x328>)
 800409e:	4013      	ands	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	220f      	movs	r2, #15
 80040b4:	4393      	bics	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4aa4      	ldr	r2, [pc, #656]	; (800435c <UART_SetConfig+0x32c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d127      	bne.n	800411e <UART_SetConfig+0xee>
 80040ce:	4ba4      	ldr	r3, [pc, #656]	; (8004360 <UART_SetConfig+0x330>)
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	2203      	movs	r2, #3
 80040d4:	4013      	ands	r3, r2
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d017      	beq.n	800410a <UART_SetConfig+0xda>
 80040da:	d81b      	bhi.n	8004114 <UART_SetConfig+0xe4>
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d00a      	beq.n	80040f6 <UART_SetConfig+0xc6>
 80040e0:	d818      	bhi.n	8004114 <UART_SetConfig+0xe4>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <UART_SetConfig+0xbc>
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d00a      	beq.n	8004100 <UART_SetConfig+0xd0>
 80040ea:	e013      	b.n	8004114 <UART_SetConfig+0xe4>
 80040ec:	231b      	movs	r3, #27
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e058      	b.n	80041a8 <UART_SetConfig+0x178>
 80040f6:	231b      	movs	r3, #27
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	2202      	movs	r2, #2
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e053      	b.n	80041a8 <UART_SetConfig+0x178>
 8004100:	231b      	movs	r3, #27
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	2204      	movs	r2, #4
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e04e      	b.n	80041a8 <UART_SetConfig+0x178>
 800410a:	231b      	movs	r3, #27
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	2208      	movs	r2, #8
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	e049      	b.n	80041a8 <UART_SetConfig+0x178>
 8004114:	231b      	movs	r3, #27
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2210      	movs	r2, #16
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e044      	b.n	80041a8 <UART_SetConfig+0x178>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a90      	ldr	r2, [pc, #576]	; (8004364 <UART_SetConfig+0x334>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d127      	bne.n	8004178 <UART_SetConfig+0x148>
 8004128:	4b8d      	ldr	r3, [pc, #564]	; (8004360 <UART_SetConfig+0x330>)
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	220c      	movs	r2, #12
 800412e:	4013      	ands	r3, r2
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d017      	beq.n	8004164 <UART_SetConfig+0x134>
 8004134:	d81b      	bhi.n	800416e <UART_SetConfig+0x13e>
 8004136:	2b08      	cmp	r3, #8
 8004138:	d00a      	beq.n	8004150 <UART_SetConfig+0x120>
 800413a:	d818      	bhi.n	800416e <UART_SetConfig+0x13e>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <UART_SetConfig+0x116>
 8004140:	2b04      	cmp	r3, #4
 8004142:	d00a      	beq.n	800415a <UART_SetConfig+0x12a>
 8004144:	e013      	b.n	800416e <UART_SetConfig+0x13e>
 8004146:	231b      	movs	r3, #27
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e02b      	b.n	80041a8 <UART_SetConfig+0x178>
 8004150:	231b      	movs	r3, #27
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	2202      	movs	r2, #2
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e026      	b.n	80041a8 <UART_SetConfig+0x178>
 800415a:	231b      	movs	r3, #27
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	2204      	movs	r2, #4
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e021      	b.n	80041a8 <UART_SetConfig+0x178>
 8004164:	231b      	movs	r3, #27
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	2208      	movs	r2, #8
 800416a:	701a      	strb	r2, [r3, #0]
 800416c:	e01c      	b.n	80041a8 <UART_SetConfig+0x178>
 800416e:	231b      	movs	r3, #27
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	2210      	movs	r2, #16
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e017      	b.n	80041a8 <UART_SetConfig+0x178>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a7a      	ldr	r2, [pc, #488]	; (8004368 <UART_SetConfig+0x338>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d104      	bne.n	800418c <UART_SetConfig+0x15c>
 8004182:	231b      	movs	r3, #27
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	e00d      	b.n	80041a8 <UART_SetConfig+0x178>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a76      	ldr	r2, [pc, #472]	; (800436c <UART_SetConfig+0x33c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d104      	bne.n	80041a0 <UART_SetConfig+0x170>
 8004196:	231b      	movs	r3, #27
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e003      	b.n	80041a8 <UART_SetConfig+0x178>
 80041a0:	231b      	movs	r3, #27
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	2210      	movs	r2, #16
 80041a6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d000      	beq.n	80041b6 <UART_SetConfig+0x186>
 80041b4:	e065      	b.n	8004282 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80041b6:	231b      	movs	r3, #27
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d015      	beq.n	80041ec <UART_SetConfig+0x1bc>
 80041c0:	dc18      	bgt.n	80041f4 <UART_SetConfig+0x1c4>
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d00d      	beq.n	80041e2 <UART_SetConfig+0x1b2>
 80041c6:	dc15      	bgt.n	80041f4 <UART_SetConfig+0x1c4>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <UART_SetConfig+0x1a2>
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d005      	beq.n	80041dc <UART_SetConfig+0x1ac>
 80041d0:	e010      	b.n	80041f4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d2:	f7fe fabf 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 80041d6:	0003      	movs	r3, r0
 80041d8:	617b      	str	r3, [r7, #20]
        break;
 80041da:	e012      	b.n	8004202 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041dc:	4b64      	ldr	r3, [pc, #400]	; (8004370 <UART_SetConfig+0x340>)
 80041de:	617b      	str	r3, [r7, #20]
        break;
 80041e0:	e00f      	b.n	8004202 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e2:	f7fe fa2b 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80041e6:	0003      	movs	r3, r0
 80041e8:	617b      	str	r3, [r7, #20]
        break;
 80041ea:	e00a      	b.n	8004202 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	617b      	str	r3, [r7, #20]
        break;
 80041f2:	e006      	b.n	8004202 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041f8:	231a      	movs	r3, #26
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
        break;
 8004200:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d100      	bne.n	800420a <UART_SetConfig+0x1da>
 8004208:	e08d      	b.n	8004326 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800420e:	4b59      	ldr	r3, [pc, #356]	; (8004374 <UART_SetConfig+0x344>)
 8004210:	0052      	lsls	r2, r2, #1
 8004212:	5ad3      	ldrh	r3, [r2, r3]
 8004214:	0019      	movs	r1, r3
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7fb ff72 	bl	8000100 <__udivsi3>
 800421c:	0003      	movs	r3, r0
 800421e:	005a      	lsls	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	18d2      	adds	r2, r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	0019      	movs	r1, r3
 800422e:	0010      	movs	r0, r2
 8004230:	f7fb ff66 	bl	8000100 <__udivsi3>
 8004234:	0003      	movs	r3, r0
 8004236:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b0f      	cmp	r3, #15
 800423c:	d91c      	bls.n	8004278 <UART_SetConfig+0x248>
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	025b      	lsls	r3, r3, #9
 8004244:	429a      	cmp	r2, r3
 8004246:	d217      	bcs.n	8004278 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	b29a      	uxth	r2, r3
 800424c:	200e      	movs	r0, #14
 800424e:	183b      	adds	r3, r7, r0
 8004250:	210f      	movs	r1, #15
 8004252:	438a      	bics	r2, r1
 8004254:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	b29b      	uxth	r3, r3
 800425c:	2207      	movs	r2, #7
 800425e:	4013      	ands	r3, r2
 8004260:	b299      	uxth	r1, r3
 8004262:	183b      	adds	r3, r7, r0
 8004264:	183a      	adds	r2, r7, r0
 8004266:	8812      	ldrh	r2, [r2, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	183a      	adds	r2, r7, r0
 8004272:	8812      	ldrh	r2, [r2, #0]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	e056      	b.n	8004326 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004278:	231a      	movs	r3, #26
 800427a:	18fb      	adds	r3, r7, r3
 800427c:	2201      	movs	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e051      	b.n	8004326 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004282:	231b      	movs	r3, #27
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d015      	beq.n	80042b8 <UART_SetConfig+0x288>
 800428c:	dc18      	bgt.n	80042c0 <UART_SetConfig+0x290>
 800428e:	2b04      	cmp	r3, #4
 8004290:	d00d      	beq.n	80042ae <UART_SetConfig+0x27e>
 8004292:	dc15      	bgt.n	80042c0 <UART_SetConfig+0x290>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <UART_SetConfig+0x26e>
 8004298:	2b02      	cmp	r3, #2
 800429a:	d005      	beq.n	80042a8 <UART_SetConfig+0x278>
 800429c:	e010      	b.n	80042c0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800429e:	f7fe fa59 	bl	8002754 <HAL_RCC_GetPCLK1Freq>
 80042a2:	0003      	movs	r3, r0
 80042a4:	617b      	str	r3, [r7, #20]
        break;
 80042a6:	e012      	b.n	80042ce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a8:	4b31      	ldr	r3, [pc, #196]	; (8004370 <UART_SetConfig+0x340>)
 80042aa:	617b      	str	r3, [r7, #20]
        break;
 80042ac:	e00f      	b.n	80042ce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ae:	f7fe f9c5 	bl	800263c <HAL_RCC_GetSysClockFreq>
 80042b2:	0003      	movs	r3, r0
 80042b4:	617b      	str	r3, [r7, #20]
        break;
 80042b6:	e00a      	b.n	80042ce <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	617b      	str	r3, [r7, #20]
        break;
 80042be:	e006      	b.n	80042ce <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80042c4:	231a      	movs	r3, #26
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]
        break;
 80042cc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d028      	beq.n	8004326 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <UART_SetConfig+0x344>)
 80042da:	0052      	lsls	r2, r2, #1
 80042dc:	5ad3      	ldrh	r3, [r2, r3]
 80042de:	0019      	movs	r1, r3
 80042e0:	6978      	ldr	r0, [r7, #20]
 80042e2:	f7fb ff0d 	bl	8000100 <__udivsi3>
 80042e6:	0003      	movs	r3, r0
 80042e8:	001a      	movs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	18d2      	adds	r2, r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	0019      	movs	r1, r3
 80042f8:	0010      	movs	r0, r2
 80042fa:	f7fb ff01 	bl	8000100 <__udivsi3>
 80042fe:	0003      	movs	r3, r0
 8004300:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b0f      	cmp	r3, #15
 8004306:	d90a      	bls.n	800431e <UART_SetConfig+0x2ee>
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	025b      	lsls	r3, r3, #9
 800430e:	429a      	cmp	r2, r3
 8004310:	d205      	bcs.n	800431e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60da      	str	r2, [r3, #12]
 800431c:	e003      	b.n	8004326 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800431e:	231a      	movs	r3, #26
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	2201      	movs	r2, #1
 8004324:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	226a      	movs	r2, #106	; 0x6a
 800432a:	2101      	movs	r1, #1
 800432c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2268      	movs	r2, #104	; 0x68
 8004332:	2101      	movs	r1, #1
 8004334:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004342:	231a      	movs	r3, #26
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	781b      	ldrb	r3, [r3, #0]
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b008      	add	sp, #32
 800434e:	bd80      	pop	{r7, pc}
 8004350:	cfff69f3 	.word	0xcfff69f3
 8004354:	ffffcfff 	.word	0xffffcfff
 8004358:	11fff4ff 	.word	0x11fff4ff
 800435c:	40013800 	.word	0x40013800
 8004360:	40021000 	.word	0x40021000
 8004364:	40004400 	.word	0x40004400
 8004368:	40004800 	.word	0x40004800
 800436c:	40004c00 	.word	0x40004c00
 8004370:	00f42400 	.word	0x00f42400
 8004374:	0800569c 	.word	0x0800569c

08004378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	2201      	movs	r2, #1
 8004386:	4013      	ands	r3, r2
 8004388:	d00b      	beq.n	80043a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a4a      	ldr	r2, [pc, #296]	; (80044bc <UART_AdvFeatureConfig+0x144>)
 8004392:	4013      	ands	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	2202      	movs	r2, #2
 80043a8:	4013      	ands	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4a43      	ldr	r2, [pc, #268]	; (80044c0 <UART_AdvFeatureConfig+0x148>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	0019      	movs	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	2204      	movs	r2, #4
 80043ca:	4013      	ands	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4a3b      	ldr	r2, [pc, #236]	; (80044c4 <UART_AdvFeatureConfig+0x14c>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	2208      	movs	r2, #8
 80043ec:	4013      	ands	r3, r2
 80043ee:	d00b      	beq.n	8004408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4a34      	ldr	r2, [pc, #208]	; (80044c8 <UART_AdvFeatureConfig+0x150>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	0019      	movs	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	2210      	movs	r2, #16
 800440e:	4013      	ands	r3, r2
 8004410:	d00b      	beq.n	800442a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a2c      	ldr	r2, [pc, #176]	; (80044cc <UART_AdvFeatureConfig+0x154>)
 800441a:	4013      	ands	r3, r2
 800441c:	0019      	movs	r1, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	2220      	movs	r2, #32
 8004430:	4013      	ands	r3, r2
 8004432:	d00b      	beq.n	800444c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <UART_AdvFeatureConfig+0x158>)
 800443c:	4013      	ands	r3, r2
 800443e:	0019      	movs	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	2240      	movs	r2, #64	; 0x40
 8004452:	4013      	ands	r3, r2
 8004454:	d01d      	beq.n	8004492 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <UART_AdvFeatureConfig+0x15c>)
 800445e:	4013      	ands	r3, r2
 8004460:	0019      	movs	r1, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	035b      	lsls	r3, r3, #13
 8004476:	429a      	cmp	r2, r3
 8004478:	d10b      	bne.n	8004492 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <UART_AdvFeatureConfig+0x160>)
 8004482:	4013      	ands	r3, r2
 8004484:	0019      	movs	r1, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	2280      	movs	r2, #128	; 0x80
 8004498:	4013      	ands	r3, r2
 800449a:	d00b      	beq.n	80044b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <UART_AdvFeatureConfig+0x164>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	0019      	movs	r1, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	605a      	str	r2, [r3, #4]
  }
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	fffdffff 	.word	0xfffdffff
 80044c0:	fffeffff 	.word	0xfffeffff
 80044c4:	fffbffff 	.word	0xfffbffff
 80044c8:	ffff7fff 	.word	0xffff7fff
 80044cc:	ffffefff 	.word	0xffffefff
 80044d0:	ffffdfff 	.word	0xffffdfff
 80044d4:	ffefffff 	.word	0xffefffff
 80044d8:	ff9fffff 	.word	0xff9fffff
 80044dc:	fff7ffff 	.word	0xfff7ffff

080044e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2290      	movs	r2, #144	; 0x90
 80044ec:	2100      	movs	r1, #0
 80044ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f0:	f7fc ff40 	bl	8001374 <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2208      	movs	r2, #8
 8004500:	4013      	ands	r3, r2
 8004502:	2b08      	cmp	r3, #8
 8004504:	d10c      	bne.n	8004520 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2280      	movs	r2, #128	; 0x80
 800450a:	0391      	lsls	r1, r2, #14
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4a1a      	ldr	r2, [pc, #104]	; (8004578 <UART_CheckIdleState+0x98>)
 8004510:	9200      	str	r2, [sp, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	f000 f832 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 8004518:	1e03      	subs	r3, r0, #0
 800451a:	d001      	beq.n	8004520 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e026      	b.n	800456e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2204      	movs	r2, #4
 8004528:	4013      	ands	r3, r2
 800452a:	2b04      	cmp	r3, #4
 800452c:	d10c      	bne.n	8004548 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2280      	movs	r2, #128	; 0x80
 8004532:	03d1      	lsls	r1, r2, #15
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4a10      	ldr	r2, [pc, #64]	; (8004578 <UART_CheckIdleState+0x98>)
 8004538:	9200      	str	r2, [sp, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	f000 f81e 	bl	800457c <UART_WaitOnFlagUntilTimeout>
 8004540:	1e03      	subs	r3, r0, #0
 8004542:	d001      	beq.n	8004548 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e012      	b.n	800456e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2288      	movs	r2, #136	; 0x88
 800454c:	2120      	movs	r1, #32
 800454e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	228c      	movs	r2, #140	; 0x8c
 8004554:	2120      	movs	r1, #32
 8004556:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2284      	movs	r2, #132	; 0x84
 8004568:	2100      	movs	r1, #0
 800456a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	0018      	movs	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	b004      	add	sp, #16
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	01ffffff 	.word	0x01ffffff

0800457c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b094      	sub	sp, #80	; 0x50
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	1dfb      	adds	r3, r7, #7
 800458a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458c:	e0a7      	b.n	80046de <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800458e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004590:	3301      	adds	r3, #1
 8004592:	d100      	bne.n	8004596 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004594:	e0a3      	b.n	80046de <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004596:	f7fc feed 	bl	8001374 <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <UART_WaitOnFlagUntilTimeout+0x30>
 80045a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d13f      	bne.n	800462c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ac:	f3ef 8310 	mrs	r3, PRIMASK
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045b4:	647b      	str	r3, [r7, #68]	; 0x44
 80045b6:	2301      	movs	r3, #1
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	f383 8810 	msr	PRIMASK, r3
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	494e      	ldr	r1, [pc, #312]	; (8004708 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80045ce:	400a      	ands	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	f383 8810 	msr	PRIMASK, r3
}
 80045dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045de:	f3ef 8310 	mrs	r3, PRIMASK
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80045e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e6:	643b      	str	r3, [r7, #64]	; 0x40
 80045e8:	2301      	movs	r3, #1
 80045ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ee:	f383 8810 	msr	PRIMASK, r3
}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2101      	movs	r1, #1
 8004600:	438a      	bics	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460a:	f383 8810 	msr	PRIMASK, r3
}
 800460e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2288      	movs	r2, #136	; 0x88
 8004614:	2120      	movs	r1, #32
 8004616:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	228c      	movs	r2, #140	; 0x8c
 800461c:	2120      	movs	r1, #32
 800461e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2284      	movs	r2, #132	; 0x84
 8004624:	2100      	movs	r1, #0
 8004626:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e069      	b.n	8004700 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2204      	movs	r2, #4
 8004634:	4013      	ands	r3, r2
 8004636:	d052      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	401a      	ands	r2, r3
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	429a      	cmp	r2, r3
 800464a:	d148      	bne.n	80046de <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2280      	movs	r2, #128	; 0x80
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004656:	f3ef 8310 	mrs	r3, PRIMASK
 800465a:	613b      	str	r3, [r7, #16]
  return(result);
 800465c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800465e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f383 8810 	msr	PRIMASK, r3
}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4924      	ldr	r1, [pc, #144]	; (8004708 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004678:	400a      	ands	r2, r1
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f383 8810 	msr	PRIMASK, r3
}
 8004686:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004688:	f3ef 8310 	mrs	r3, PRIMASK
 800468c:	61fb      	str	r3, [r7, #28]
  return(result);
 800468e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004690:	64bb      	str	r3, [r7, #72]	; 0x48
 8004692:	2301      	movs	r3, #1
 8004694:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f383 8810 	msr	PRIMASK, r3
}
 800469c:	46c0      	nop			; (mov r8, r8)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2101      	movs	r1, #1
 80046aa:	438a      	bics	r2, r1
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	f383 8810 	msr	PRIMASK, r3
}
 80046b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2288      	movs	r2, #136	; 0x88
 80046be:	2120      	movs	r1, #32
 80046c0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	228c      	movs	r2, #140	; 0x8c
 80046c6:	2120      	movs	r1, #32
 80046c8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2290      	movs	r2, #144	; 0x90
 80046ce:	2120      	movs	r1, #32
 80046d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2284      	movs	r2, #132	; 0x84
 80046d6:	2100      	movs	r1, #0
 80046d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e010      	b.n	8004700 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	425a      	negs	r2, r3
 80046ee:	4153      	adcs	r3, r2
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	001a      	movs	r2, r3
 80046f4:	1dfb      	adds	r3, r7, #7
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d100      	bne.n	80046fe <UART_WaitOnFlagUntilTimeout+0x182>
 80046fc:	e747      	b.n	800458e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	b014      	add	sp, #80	; 0x50
 8004706:	bd80      	pop	{r7, pc}
 8004708:	fffffe5f 	.word	0xfffffe5f

0800470c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b098      	sub	sp, #96	; 0x60
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	1dbb      	adds	r3, r7, #6
 8004718:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1dba      	adds	r2, r7, #6
 8004724:	215c      	movs	r1, #92	; 0x5c
 8004726:	8812      	ldrh	r2, [r2, #0]
 8004728:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1dba      	adds	r2, r7, #6
 800472e:	215e      	movs	r1, #94	; 0x5e
 8004730:	8812      	ldrh	r2, [r2, #0]
 8004732:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	2380      	movs	r3, #128	; 0x80
 8004740:	015b      	lsls	r3, r3, #5
 8004742:	429a      	cmp	r2, r3
 8004744:	d10d      	bne.n	8004762 <UART_Start_Receive_IT+0x56>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <UART_Start_Receive_IT+0x4c>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2260      	movs	r2, #96	; 0x60
 8004752:	497b      	ldr	r1, [pc, #492]	; (8004940 <UART_Start_Receive_IT+0x234>)
 8004754:	5299      	strh	r1, [r3, r2]
 8004756:	e02e      	b.n	80047b6 <UART_Start_Receive_IT+0xaa>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2260      	movs	r2, #96	; 0x60
 800475c:	21ff      	movs	r1, #255	; 0xff
 800475e:	5299      	strh	r1, [r3, r2]
 8004760:	e029      	b.n	80047b6 <UART_Start_Receive_IT+0xaa>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10d      	bne.n	8004786 <UART_Start_Receive_IT+0x7a>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d104      	bne.n	800477c <UART_Start_Receive_IT+0x70>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2260      	movs	r2, #96	; 0x60
 8004776:	21ff      	movs	r1, #255	; 0xff
 8004778:	5299      	strh	r1, [r3, r2]
 800477a:	e01c      	b.n	80047b6 <UART_Start_Receive_IT+0xaa>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2260      	movs	r2, #96	; 0x60
 8004780:	217f      	movs	r1, #127	; 0x7f
 8004782:	5299      	strh	r1, [r3, r2]
 8004784:	e017      	b.n	80047b6 <UART_Start_Receive_IT+0xaa>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	055b      	lsls	r3, r3, #21
 800478e:	429a      	cmp	r2, r3
 8004790:	d10d      	bne.n	80047ae <UART_Start_Receive_IT+0xa2>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <UART_Start_Receive_IT+0x98>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2260      	movs	r2, #96	; 0x60
 800479e:	217f      	movs	r1, #127	; 0x7f
 80047a0:	5299      	strh	r1, [r3, r2]
 80047a2:	e008      	b.n	80047b6 <UART_Start_Receive_IT+0xaa>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2260      	movs	r2, #96	; 0x60
 80047a8:	213f      	movs	r1, #63	; 0x3f
 80047aa:	5299      	strh	r1, [r3, r2]
 80047ac:	e003      	b.n	80047b6 <UART_Start_Receive_IT+0xaa>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2260      	movs	r2, #96	; 0x60
 80047b2:	2100      	movs	r1, #0
 80047b4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2290      	movs	r2, #144	; 0x90
 80047ba:	2100      	movs	r1, #0
 80047bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	228c      	movs	r2, #140	; 0x8c
 80047c2:	2122      	movs	r1, #34	; 0x22
 80047c4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ca:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80047cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d0:	2301      	movs	r3, #1
 80047d2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d6:	f383 8810 	msr	PRIMASK, r3
}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2101      	movs	r1, #1
 80047e8:	430a      	orrs	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ee:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047fc:	2380      	movs	r3, #128	; 0x80
 80047fe:	059b      	lsls	r3, r3, #22
 8004800:	429a      	cmp	r2, r3
 8004802:	d150      	bne.n	80048a6 <UART_Start_Receive_IT+0x19a>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2268      	movs	r2, #104	; 0x68
 8004808:	5a9b      	ldrh	r3, [r3, r2]
 800480a:	1dba      	adds	r2, r7, #6
 800480c:	8812      	ldrh	r2, [r2, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d349      	bcc.n	80048a6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	015b      	lsls	r3, r3, #5
 800481a:	429a      	cmp	r2, r3
 800481c:	d107      	bne.n	800482e <UART_Start_Receive_IT+0x122>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a46      	ldr	r2, [pc, #280]	; (8004944 <UART_Start_Receive_IT+0x238>)
 800482a:	675a      	str	r2, [r3, #116]	; 0x74
 800482c:	e002      	b.n	8004834 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a45      	ldr	r2, [pc, #276]	; (8004948 <UART_Start_Receive_IT+0x23c>)
 8004832:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d019      	beq.n	8004870 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800483c:	f3ef 8310 	mrs	r3, PRIMASK
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004844:	65bb      	str	r3, [r7, #88]	; 0x58
 8004846:	2301      	movs	r3, #1
 8004848:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	f383 8810 	msr	PRIMASK, r3
}
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	0049      	lsls	r1, r1, #1
 8004860:	430a      	orrs	r2, r1
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004866:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486a:	f383 8810 	msr	PRIMASK, r3
}
 800486e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004870:	f3ef 8310 	mrs	r3, PRIMASK
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004878:	657b      	str	r3, [r7, #84]	; 0x54
 800487a:	2301      	movs	r3, #1
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	f383 8810 	msr	PRIMASK, r3
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	0549      	lsls	r1, r1, #21
 8004894:	430a      	orrs	r2, r1
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	f383 8810 	msr	PRIMASK, r3
}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	e047      	b.n	8004936 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	015b      	lsls	r3, r3, #5
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d107      	bne.n	80048c2 <UART_Start_Receive_IT+0x1b6>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a23      	ldr	r2, [pc, #140]	; (800494c <UART_Start_Receive_IT+0x240>)
 80048be:	675a      	str	r2, [r3, #116]	; 0x74
 80048c0:	e002      	b.n	80048c8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <UART_Start_Receive_IT+0x244>)
 80048c6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d019      	beq.n	8004904 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d0:	f3ef 8310 	mrs	r3, PRIMASK
 80048d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80048d6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80048d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048da:	2301      	movs	r3, #1
 80048dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	f383 8810 	msr	PRIMASK, r3
}
 80048e4:	46c0      	nop			; (mov r8, r8)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2190      	movs	r1, #144	; 0x90
 80048f2:	0049      	lsls	r1, r1, #1
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f383 8810 	msr	PRIMASK, r3
}
 8004902:	e018      	b.n	8004936 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004904:	f3ef 8310 	mrs	r3, PRIMASK
 8004908:	613b      	str	r3, [r7, #16]
  return(result);
 800490a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800490c:	653b      	str	r3, [r7, #80]	; 0x50
 800490e:	2301      	movs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f383 8810 	msr	PRIMASK, r3
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2120      	movs	r1, #32
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	f383 8810 	msr	PRIMASK, r3
}
 8004934:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	0018      	movs	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	b018      	add	sp, #96	; 0x60
 800493e:	bd80      	pop	{r7, pc}
 8004940:	000001ff 	.word	0x000001ff
 8004944:	0800507d 	.word	0x0800507d
 8004948:	08004d91 	.word	0x08004d91
 800494c:	08004c1d 	.word	0x08004c1d
 8004950:	08004aa9 	.word	0x08004aa9

08004954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	; 0x38
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495c:	f3ef 8310 	mrs	r3, PRIMASK
 8004960:	617b      	str	r3, [r7, #20]
  return(result);
 8004962:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
 8004966:	2301      	movs	r3, #1
 8004968:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4926      	ldr	r1, [pc, #152]	; (8004a18 <UART_EndRxTransfer+0xc4>)
 800497e:	400a      	ands	r2, r1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498e:	f3ef 8310 	mrs	r3, PRIMASK
 8004992:	623b      	str	r3, [r7, #32]
  return(result);
 8004994:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
 8004998:	2301      	movs	r3, #1
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	491b      	ldr	r1, [pc, #108]	; (8004a1c <UART_EndRxTransfer+0xc8>)
 80049b0:	400a      	ands	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d118      	bne.n	80049fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c8:	f3ef 8310 	mrs	r3, PRIMASK
 80049cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d2:	2301      	movs	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f383 8810 	msr	PRIMASK, r3
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2110      	movs	r1, #16
 80049ea:	438a      	bics	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f383 8810 	msr	PRIMASK, r3
}
 80049f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	228c      	movs	r2, #140	; 0x8c
 80049fe:	2120      	movs	r1, #32
 8004a00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b00e      	add	sp, #56	; 0x38
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	fffffedf 	.word	0xfffffedf
 8004a1c:	effffffe 	.word	0xeffffffe

08004a20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	225e      	movs	r2, #94	; 0x5e
 8004a32:	2100      	movs	r1, #0
 8004a34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2256      	movs	r2, #86	; 0x56
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7ff fae1 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b004      	add	sp, #16
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a56:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	2301      	movs	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f383 8810 	msr	PRIMASK, r3
}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2140      	movs	r1, #64	; 0x40
 8004a78:	438a      	bics	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f383 8810 	msr	PRIMASK, r3
}
 8004a86:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2288      	movs	r2, #136	; 0x88
 8004a8c:	2120      	movs	r1, #32
 8004a8e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7ff faad 	bl	8003ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b006      	add	sp, #24
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b090      	sub	sp, #64	; 0x40
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ab0:	203e      	movs	r0, #62	; 0x3e
 8004ab2:	183b      	adds	r3, r7, r0
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	2160      	movs	r1, #96	; 0x60
 8004ab8:	5a52      	ldrh	r2, [r2, r1]
 8004aba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	228c      	movs	r2, #140	; 0x8c
 8004ac0:	589b      	ldr	r3, [r3, r2]
 8004ac2:	2b22      	cmp	r3, #34	; 0x22
 8004ac4:	d000      	beq.n	8004ac8 <UART_RxISR_8BIT+0x20>
 8004ac6:	e09a      	b.n	8004bfe <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ace:	213c      	movs	r1, #60	; 0x3c
 8004ad0:	187b      	adds	r3, r7, r1
 8004ad2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	183b      	adds	r3, r7, r0
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b2d9      	uxtb	r1, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae4:	400a      	ands	r2, r1
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	225e      	movs	r2, #94	; 0x5e
 8004af8:	5a9b      	ldrh	r3, [r3, r2]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b299      	uxth	r1, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	225e      	movs	r2, #94	; 0x5e
 8004b04:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	225e      	movs	r2, #94	; 0x5e
 8004b0a:	5a9b      	ldrh	r3, [r3, r2]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d000      	beq.n	8004b14 <UART_RxISR_8BIT+0x6c>
 8004b12:	e07c      	b.n	8004c0e <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b14:	f3ef 8310 	mrs	r3, PRIMASK
 8004b18:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b1e:	2301      	movs	r3, #1
 8004b20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	f383 8810 	msr	PRIMASK, r3
}
 8004b28:	46c0      	nop			; (mov r8, r8)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4938      	ldr	r1, [pc, #224]	; (8004c18 <UART_RxISR_8BIT+0x170>)
 8004b36:	400a      	ands	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b46:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b50:	2301      	movs	r3, #1
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	f383 8810 	msr	PRIMASK, r3
}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689a      	ldr	r2, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2101      	movs	r1, #1
 8004b68:	438a      	bics	r2, r1
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	f383 8810 	msr	PRIMASK, r3
}
 8004b76:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	228c      	movs	r2, #140	; 0x8c
 8004b7c:	2120      	movs	r1, #32
 8004b7e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d12f      	bne.n	8004bf4 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ba0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f383 8810 	msr	PRIMASK, r3
}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2110      	movs	r1, #16
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f383 8810 	msr	PRIMASK, r3
}
 8004bca:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	2210      	movs	r2, #16
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d103      	bne.n	8004be2 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2210      	movs	r2, #16
 8004be0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	225c      	movs	r2, #92	; 0x5c
 8004be6:	5a9a      	ldrh	r2, [r3, r2]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	0011      	movs	r1, r2
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7ff fa13 	bl	8004018 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bf2:	e00c      	b.n	8004c0e <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7fb ff8a 	bl	8000b10 <HAL_UART_RxCpltCallback>
}
 8004bfc:	e007      	b.n	8004c0e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2108      	movs	r1, #8
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	619a      	str	r2, [r3, #24]
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b010      	add	sp, #64	; 0x40
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	fffffedf 	.word	0xfffffedf

08004c1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b090      	sub	sp, #64	; 0x40
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c24:	203e      	movs	r0, #62	; 0x3e
 8004c26:	183b      	adds	r3, r7, r0
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	2160      	movs	r1, #96	; 0x60
 8004c2c:	5a52      	ldrh	r2, [r2, r1]
 8004c2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	228c      	movs	r2, #140	; 0x8c
 8004c34:	589b      	ldr	r3, [r3, r2]
 8004c36:	2b22      	cmp	r3, #34	; 0x22
 8004c38:	d000      	beq.n	8004c3c <UART_RxISR_16BIT+0x20>
 8004c3a:	e09a      	b.n	8004d72 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c42:	213c      	movs	r1, #60	; 0x3c
 8004c44:	187b      	adds	r3, r7, r1
 8004c46:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c4e:	187b      	adds	r3, r7, r1
 8004c50:	183a      	adds	r2, r7, r0
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	8812      	ldrh	r2, [r2, #0]
 8004c56:	4013      	ands	r3, r2
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	1c9a      	adds	r2, r3, #2
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	225e      	movs	r2, #94	; 0x5e
 8004c6c:	5a9b      	ldrh	r3, [r3, r2]
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b299      	uxth	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	225e      	movs	r2, #94	; 0x5e
 8004c78:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	225e      	movs	r2, #94	; 0x5e
 8004c7e:	5a9b      	ldrh	r3, [r3, r2]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d000      	beq.n	8004c88 <UART_RxISR_16BIT+0x6c>
 8004c86:	e07c      	b.n	8004d82 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c88:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c8e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
 8004c92:	2301      	movs	r3, #1
 8004c94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f383 8810 	msr	PRIMASK, r3
}
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4938      	ldr	r1, [pc, #224]	; (8004d8c <UART_RxISR_16BIT+0x170>)
 8004caa:	400a      	ands	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f383 8810 	msr	PRIMASK, r3
}
 8004cb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cba:	f3ef 8310 	mrs	r3, PRIMASK
 8004cbe:	623b      	str	r3, [r7, #32]
  return(result);
 8004cc0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	f383 8810 	msr	PRIMASK, r3
}
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2101      	movs	r1, #1
 8004cdc:	438a      	bics	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	f383 8810 	msr	PRIMASK, r3
}
 8004cea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	228c      	movs	r2, #140	; 0x8c
 8004cf0:	2120      	movs	r1, #32
 8004cf2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d12f      	bne.n	8004d68 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d14:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d18:	2301      	movs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f383 8810 	msr	PRIMASK, r3
}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2110      	movs	r1, #16
 8004d30:	438a      	bics	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f383 8810 	msr	PRIMASK, r3
}
 8004d3e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	2210      	movs	r2, #16
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d103      	bne.n	8004d56 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2210      	movs	r2, #16
 8004d54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	225c      	movs	r2, #92	; 0x5c
 8004d5a:	5a9a      	ldrh	r2, [r3, r2]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	0011      	movs	r1, r2
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7ff f959 	bl	8004018 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d66:	e00c      	b.n	8004d82 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7fb fed0 	bl	8000b10 <HAL_UART_RxCpltCallback>
}
 8004d70:	e007      	b.n	8004d82 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699a      	ldr	r2, [r3, #24]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2108      	movs	r1, #8
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	619a      	str	r2, [r3, #24]
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b010      	add	sp, #64	; 0x40
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	fffffedf 	.word	0xfffffedf

08004d90 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b09c      	sub	sp, #112	; 0x70
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004d98:	236a      	movs	r3, #106	; 0x6a
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	2160      	movs	r1, #96	; 0x60
 8004da0:	5a52      	ldrh	r2, [r2, r1]
 8004da2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	228c      	movs	r2, #140	; 0x8c
 8004dc0:	589b      	ldr	r3, [r3, r2]
 8004dc2:	2b22      	cmp	r3, #34	; 0x22
 8004dc4:	d000      	beq.n	8004dc8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004dc6:	e144      	b.n	8005052 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004dc8:	235e      	movs	r3, #94	; 0x5e
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	2168      	movs	r1, #104	; 0x68
 8004dd0:	5a52      	ldrh	r2, [r2, r1]
 8004dd2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004dd4:	e0eb      	b.n	8004fae <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ddc:	215c      	movs	r1, #92	; 0x5c
 8004dde:	187b      	adds	r3, r7, r1
 8004de0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004de2:	187b      	adds	r3, r7, r1
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	236a      	movs	r3, #106	; 0x6a
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b2d9      	uxtb	r1, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df4:	400a      	ands	r2, r1
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	225e      	movs	r2, #94	; 0x5e
 8004e08:	5a9b      	ldrh	r3, [r3, r2]
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b299      	uxth	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	225e      	movs	r2, #94	; 0x5e
 8004e14:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	2207      	movs	r2, #7
 8004e22:	4013      	ands	r3, r2
 8004e24:	d049      	beq.n	8004eba <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e28:	2201      	movs	r2, #1
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d010      	beq.n	8004e50 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004e2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4013      	ands	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2290      	movs	r2, #144	; 0x90
 8004e44:	589b      	ldr	r3, [r3, r2]
 8004e46:	2201      	movs	r2, #1
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2190      	movs	r1, #144	; 0x90
 8004e4e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e52:	2202      	movs	r2, #2
 8004e54:	4013      	ands	r3, r2
 8004e56:	d00f      	beq.n	8004e78 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d00b      	beq.n	8004e78 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2202      	movs	r2, #2
 8004e66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2290      	movs	r2, #144	; 0x90
 8004e6c:	589b      	ldr	r3, [r3, r2]
 8004e6e:	2204      	movs	r2, #4
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2190      	movs	r1, #144	; 0x90
 8004e76:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d00f      	beq.n	8004ea0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e82:	2201      	movs	r2, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d00b      	beq.n	8004ea0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2290      	movs	r2, #144	; 0x90
 8004e94:	589b      	ldr	r3, [r3, r2]
 8004e96:	2202      	movs	r2, #2
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2190      	movs	r1, #144	; 0x90
 8004e9e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2290      	movs	r2, #144	; 0x90
 8004ea4:	589b      	ldr	r3, [r3, r2]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7ff f8ab 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2290      	movs	r2, #144	; 0x90
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	225e      	movs	r2, #94	; 0x5e
 8004ebe:	5a9b      	ldrh	r3, [r3, r2]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d173      	bne.n	8004fae <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	f383 8810 	msr	PRIMASK, r3
}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4961      	ldr	r1, [pc, #388]	; (800506c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8004ee8:	400a      	ands	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f00:	657b      	str	r3, [r7, #84]	; 0x54
 8004f02:	2301      	movs	r3, #1
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4955      	ldr	r1, [pc, #340]	; (8005070 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f20:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	228c      	movs	r2, #140	; 0x8c
 8004f2e:	2120      	movs	r1, #32
 8004f30:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d12f      	bne.n	8004fa6 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f50:	623b      	str	r3, [r7, #32]
  return(result);
 8004f52:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f54:	653b      	str	r3, [r7, #80]	; 0x50
 8004f56:	2301      	movs	r3, #1
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	f383 8810 	msr	PRIMASK, r3
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2110      	movs	r1, #16
 8004f6e:	438a      	bics	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f74:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	f383 8810 	msr	PRIMASK, r3
}
 8004f7c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2210      	movs	r2, #16
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d103      	bne.n	8004f94 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	225c      	movs	r2, #92	; 0x5c
 8004f98:	5a9a      	ldrh	r2, [r3, r2]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	0011      	movs	r1, r2
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f7ff f83a 	bl	8004018 <HAL_UARTEx_RxEventCallback>
 8004fa4:	e003      	b.n	8004fae <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f7fb fdb1 	bl	8000b10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004fae:	235e      	movs	r3, #94	; 0x5e
 8004fb0:	18fb      	adds	r3, r7, r3
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8004fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fba:	2220      	movs	r2, #32
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d000      	beq.n	8004fc2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8004fc0:	e709      	b.n	8004dd6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004fc2:	204e      	movs	r0, #78	; 0x4e
 8004fc4:	183b      	adds	r3, r7, r0
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	215e      	movs	r1, #94	; 0x5e
 8004fca:	5a52      	ldrh	r2, [r2, r1]
 8004fcc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004fce:	0001      	movs	r1, r0
 8004fd0:	187b      	adds	r3, r7, r1
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d044      	beq.n	8005062 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2268      	movs	r2, #104	; 0x68
 8004fdc:	5a9b      	ldrh	r3, [r3, r2]
 8004fde:	187a      	adds	r2, r7, r1
 8004fe0:	8812      	ldrh	r2, [r2, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d23d      	bcs.n	8005062 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fea:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fec:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f383 8810 	msr	PRIMASK, r3
}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	491b      	ldr	r1, [pc, #108]	; (8005074 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005008:	400a      	ands	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f383 8810 	msr	PRIMASK, r3
}
 8005016:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a17      	ldr	r2, [pc, #92]	; (8005078 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 800501c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800501e:	f3ef 8310 	mrs	r3, PRIMASK
 8005022:	617b      	str	r3, [r7, #20]
  return(result);
 8005024:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005026:	647b      	str	r3, [r7, #68]	; 0x44
 8005028:	2301      	movs	r3, #1
 800502a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2120      	movs	r1, #32
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005046:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005050:	e007      	b.n	8005062 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2108      	movs	r1, #8
 800505e:	430a      	orrs	r2, r1
 8005060:	619a      	str	r2, [r3, #24]
}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	46bd      	mov	sp, r7
 8005066:	b01c      	add	sp, #112	; 0x70
 8005068:	bd80      	pop	{r7, pc}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	fffffeff 	.word	0xfffffeff
 8005070:	effffffe 	.word	0xeffffffe
 8005074:	efffffff 	.word	0xefffffff
 8005078:	08004aa9 	.word	0x08004aa9

0800507c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b09e      	sub	sp, #120	; 0x78
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005084:	2372      	movs	r3, #114	; 0x72
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	2160      	movs	r1, #96	; 0x60
 800508c:	5a52      	ldrh	r2, [r2, r1]
 800508e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	228c      	movs	r2, #140	; 0x8c
 80050ac:	589b      	ldr	r3, [r3, r2]
 80050ae:	2b22      	cmp	r3, #34	; 0x22
 80050b0:	d000      	beq.n	80050b4 <UART_RxISR_16BIT_FIFOEN+0x38>
 80050b2:	e144      	b.n	800533e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80050b4:	2366      	movs	r3, #102	; 0x66
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	2168      	movs	r1, #104	; 0x68
 80050bc:	5a52      	ldrh	r2, [r2, r1]
 80050be:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050c0:	e0eb      	b.n	800529a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c8:	2164      	movs	r1, #100	; 0x64
 80050ca:	187b      	adds	r3, r7, r1
 80050cc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80050d4:	187b      	adds	r3, r7, r1
 80050d6:	2272      	movs	r2, #114	; 0x72
 80050d8:	18ba      	adds	r2, r7, r2
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	8812      	ldrh	r2, [r2, #0]
 80050de:	4013      	ands	r3, r2
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ea:	1c9a      	adds	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	225e      	movs	r2, #94	; 0x5e
 80050f4:	5a9b      	ldrh	r3, [r3, r2]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b299      	uxth	r1, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	225e      	movs	r2, #94	; 0x5e
 8005100:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800510a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800510c:	2207      	movs	r2, #7
 800510e:	4013      	ands	r3, r2
 8005110:	d049      	beq.n	80051a6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005114:	2201      	movs	r2, #1
 8005116:	4013      	ands	r3, r2
 8005118:	d010      	beq.n	800513c <UART_RxISR_16BIT_FIFOEN+0xc0>
 800511a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4013      	ands	r3, r2
 8005122:	d00b      	beq.n	800513c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2201      	movs	r2, #1
 800512a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2290      	movs	r2, #144	; 0x90
 8005130:	589b      	ldr	r3, [r3, r2]
 8005132:	2201      	movs	r2, #1
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2190      	movs	r1, #144	; 0x90
 800513a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800513c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513e:	2202      	movs	r2, #2
 8005140:	4013      	ands	r3, r2
 8005142:	d00f      	beq.n	8005164 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005146:	2201      	movs	r2, #1
 8005148:	4013      	ands	r3, r2
 800514a:	d00b      	beq.n	8005164 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2202      	movs	r2, #2
 8005152:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2290      	movs	r2, #144	; 0x90
 8005158:	589b      	ldr	r3, [r3, r2]
 800515a:	2204      	movs	r2, #4
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2190      	movs	r1, #144	; 0x90
 8005162:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005166:	2204      	movs	r2, #4
 8005168:	4013      	ands	r3, r2
 800516a:	d00f      	beq.n	800518c <UART_RxISR_16BIT_FIFOEN+0x110>
 800516c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800516e:	2201      	movs	r2, #1
 8005170:	4013      	ands	r3, r2
 8005172:	d00b      	beq.n	800518c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2204      	movs	r2, #4
 800517a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2290      	movs	r2, #144	; 0x90
 8005180:	589b      	ldr	r3, [r3, r2]
 8005182:	2202      	movs	r2, #2
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2190      	movs	r1, #144	; 0x90
 800518a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2290      	movs	r2, #144	; 0x90
 8005190:	589b      	ldr	r3, [r3, r2]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	0018      	movs	r0, r3
 800519a:	f7fe ff35 	bl	8004008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2290      	movs	r2, #144	; 0x90
 80051a2:	2100      	movs	r1, #0
 80051a4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	225e      	movs	r2, #94	; 0x5e
 80051aa:	5a9b      	ldrh	r3, [r3, r2]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d173      	bne.n	800529a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b2:	f3ef 8310 	mrs	r3, PRIMASK
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051bc:	2301      	movs	r3, #1
 80051be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c2:	f383 8810 	msr	PRIMASK, r3
}
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4961      	ldr	r1, [pc, #388]	; (8005358 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80051d4:	400a      	ands	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	f383 8810 	msr	PRIMASK, r3
}
 80051e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e4:	f3ef 8310 	mrs	r3, PRIMASK
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80051ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ee:	2301      	movs	r3, #1
 80051f0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f4:	f383 8810 	msr	PRIMASK, r3
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4955      	ldr	r1, [pc, #340]	; (800535c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8005206:	400a      	ands	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800520c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005210:	f383 8810 	msr	PRIMASK, r3
}
 8005214:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	228c      	movs	r2, #140	; 0x8c
 800521a:	2120      	movs	r1, #32
 800521c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d12f      	bne.n	8005292 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005238:	f3ef 8310 	mrs	r3, PRIMASK
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005240:	657b      	str	r3, [r7, #84]	; 0x54
 8005242:	2301      	movs	r3, #1
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	f383 8810 	msr	PRIMASK, r3
}
 800524c:	46c0      	nop			; (mov r8, r8)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2110      	movs	r1, #16
 800525a:	438a      	bics	r2, r1
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	f383 8810 	msr	PRIMASK, r3
}
 8005268:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	2210      	movs	r2, #16
 8005272:	4013      	ands	r3, r2
 8005274:	2b10      	cmp	r3, #16
 8005276:	d103      	bne.n	8005280 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2210      	movs	r2, #16
 800527e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	225c      	movs	r2, #92	; 0x5c
 8005284:	5a9a      	ldrh	r2, [r3, r2]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	0011      	movs	r1, r2
 800528a:	0018      	movs	r0, r3
 800528c:	f7fe fec4 	bl	8004018 <HAL_UARTEx_RxEventCallback>
 8005290:	e003      	b.n	800529a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f7fb fc3b 	bl	8000b10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800529a:	2366      	movs	r3, #102	; 0x66
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <UART_RxISR_16BIT_FIFOEN+0x232>
 80052a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a6:	2220      	movs	r2, #32
 80052a8:	4013      	ands	r3, r2
 80052aa:	d000      	beq.n	80052ae <UART_RxISR_16BIT_FIFOEN+0x232>
 80052ac:	e709      	b.n	80050c2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80052ae:	2052      	movs	r0, #82	; 0x52
 80052b0:	183b      	adds	r3, r7, r0
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	215e      	movs	r1, #94	; 0x5e
 80052b6:	5a52      	ldrh	r2, [r2, r1]
 80052b8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80052ba:	0001      	movs	r1, r0
 80052bc:	187b      	adds	r3, r7, r1
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d044      	beq.n	800534e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2268      	movs	r2, #104	; 0x68
 80052c8:	5a9b      	ldrh	r3, [r3, r2]
 80052ca:	187a      	adds	r2, r7, r1
 80052cc:	8812      	ldrh	r2, [r2, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d23d      	bcs.n	800534e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d2:	f3ef 8310 	mrs	r3, PRIMASK
 80052d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80052d8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	2301      	movs	r3, #1
 80052de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f383 8810 	msr	PRIMASK, r3
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	491b      	ldr	r1, [pc, #108]	; (8005360 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80052f4:	400a      	ands	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f383 8810 	msr	PRIMASK, r3
}
 8005302:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8005308:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800530a:	f3ef 8310 	mrs	r3, PRIMASK
 800530e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005310:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005312:	64bb      	str	r3, [r7, #72]	; 0x48
 8005314:	2301      	movs	r3, #1
 8005316:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f383 8810 	msr	PRIMASK, r3
}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2120      	movs	r1, #32
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005332:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	f383 8810 	msr	PRIMASK, r3
}
 800533a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800533c:	e007      	b.n	800534e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2108      	movs	r1, #8
 800534a:	430a      	orrs	r2, r1
 800534c:	619a      	str	r2, [r3, #24]
}
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	46bd      	mov	sp, r7
 8005352:	b01e      	add	sp, #120	; 0x78
 8005354:	bd80      	pop	{r7, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	fffffeff 	.word	0xfffffeff
 800535c:	effffffe 	.word	0xeffffffe
 8005360:	efffffff 	.word	0xefffffff
 8005364:	08004c1d 	.word	0x08004c1d

08005368 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005370:	46c0      	nop			; (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	b002      	add	sp, #8
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005380:	46c0      	nop			; (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b002      	add	sp, #8
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2284      	movs	r2, #132	; 0x84
 80053a4:	5c9b      	ldrb	r3, [r3, r2]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_UARTEx_DisableFifoMode+0x16>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e027      	b.n	80053fe <HAL_UARTEx_DisableFifoMode+0x66>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2284      	movs	r2, #132	; 0x84
 80053b2:	2101      	movs	r1, #1
 80053b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2288      	movs	r2, #136	; 0x88
 80053ba:	2124      	movs	r1, #36	; 0x24
 80053bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2101      	movs	r1, #1
 80053d2:	438a      	bics	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <HAL_UARTEx_DisableFifoMode+0x70>)
 80053da:	4013      	ands	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2288      	movs	r2, #136	; 0x88
 80053f0:	2120      	movs	r1, #32
 80053f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2284      	movs	r2, #132	; 0x84
 80053f8:	2100      	movs	r1, #0
 80053fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	0018      	movs	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	b004      	add	sp, #16
 8005404:	bd80      	pop	{r7, pc}
 8005406:	46c0      	nop			; (mov r8, r8)
 8005408:	dfffffff 	.word	0xdfffffff

0800540c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2284      	movs	r2, #132	; 0x84
 800541a:	5c9b      	ldrb	r3, [r3, r2]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005420:	2302      	movs	r3, #2
 8005422:	e02e      	b.n	8005482 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2284      	movs	r2, #132	; 0x84
 8005428:	2101      	movs	r1, #1
 800542a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2288      	movs	r2, #136	; 0x88
 8005430:	2124      	movs	r1, #36	; 0x24
 8005432:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2101      	movs	r1, #1
 8005448:	438a      	bics	r2, r1
 800544a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	08d9      	lsrs	r1, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f000 f854 	bl	8005510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2288      	movs	r2, #136	; 0x88
 8005474:	2120      	movs	r1, #32
 8005476:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2284      	movs	r2, #132	; 0x84
 800547c:	2100      	movs	r1, #0
 800547e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	0018      	movs	r0, r3
 8005484:	46bd      	mov	sp, r7
 8005486:	b004      	add	sp, #16
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2284      	movs	r2, #132	; 0x84
 800549a:	5c9b      	ldrb	r3, [r3, r2]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e02f      	b.n	8005504 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2284      	movs	r2, #132	; 0x84
 80054a8:	2101      	movs	r1, #1
 80054aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2288      	movs	r2, #136	; 0x88
 80054b0:	2124      	movs	r1, #36	; 0x24
 80054b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2101      	movs	r1, #1
 80054c8:	438a      	bics	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	4a0e      	ldr	r2, [pc, #56]	; (800550c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	0019      	movs	r1, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f000 f813 	bl	8005510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2288      	movs	r2, #136	; 0x88
 80054f6:	2120      	movs	r1, #32
 80054f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2284      	movs	r2, #132	; 0x84
 80054fe:	2100      	movs	r1, #0
 8005500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b004      	add	sp, #16
 800550a:	bd80      	pop	{r7, pc}
 800550c:	f1ffffff 	.word	0xf1ffffff

08005510 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800551c:	2b00      	cmp	r3, #0
 800551e:	d108      	bne.n	8005532 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	226a      	movs	r2, #106	; 0x6a
 8005524:	2101      	movs	r1, #1
 8005526:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2268      	movs	r2, #104	; 0x68
 800552c:	2101      	movs	r1, #1
 800552e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005530:	e043      	b.n	80055ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005532:	260f      	movs	r6, #15
 8005534:	19bb      	adds	r3, r7, r6
 8005536:	2208      	movs	r2, #8
 8005538:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800553a:	200e      	movs	r0, #14
 800553c:	183b      	adds	r3, r7, r0
 800553e:	2208      	movs	r2, #8
 8005540:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	0e5b      	lsrs	r3, r3, #25
 800554a:	b2da      	uxtb	r2, r3
 800554c:	240d      	movs	r4, #13
 800554e:	193b      	adds	r3, r7, r4
 8005550:	2107      	movs	r1, #7
 8005552:	400a      	ands	r2, r1
 8005554:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	0f5b      	lsrs	r3, r3, #29
 800555e:	b2da      	uxtb	r2, r3
 8005560:	250c      	movs	r5, #12
 8005562:	197b      	adds	r3, r7, r5
 8005564:	2107      	movs	r1, #7
 8005566:	400a      	ands	r2, r1
 8005568:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800556a:	183b      	adds	r3, r7, r0
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	197a      	adds	r2, r7, r5
 8005570:	7812      	ldrb	r2, [r2, #0]
 8005572:	4914      	ldr	r1, [pc, #80]	; (80055c4 <UARTEx_SetNbDataToProcess+0xb4>)
 8005574:	5c8a      	ldrb	r2, [r1, r2]
 8005576:	435a      	muls	r2, r3
 8005578:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800557a:	197b      	adds	r3, r7, r5
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <UARTEx_SetNbDataToProcess+0xb8>)
 8005580:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005582:	0019      	movs	r1, r3
 8005584:	f7fa fe46 	bl	8000214 <__divsi3>
 8005588:	0003      	movs	r3, r0
 800558a:	b299      	uxth	r1, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	226a      	movs	r2, #106	; 0x6a
 8005590:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005592:	19bb      	adds	r3, r7, r6
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	193a      	adds	r2, r7, r4
 8005598:	7812      	ldrb	r2, [r2, #0]
 800559a:	490a      	ldr	r1, [pc, #40]	; (80055c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800559c:	5c8a      	ldrb	r2, [r1, r2]
 800559e:	435a      	muls	r2, r3
 80055a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80055a2:	193b      	adds	r3, r7, r4
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <UARTEx_SetNbDataToProcess+0xb8>)
 80055a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055aa:	0019      	movs	r1, r3
 80055ac:	f7fa fe32 	bl	8000214 <__divsi3>
 80055b0:	0003      	movs	r3, r0
 80055b2:	b299      	uxth	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2268      	movs	r2, #104	; 0x68
 80055b8:	5299      	strh	r1, [r3, r2]
}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	46bd      	mov	sp, r7
 80055be:	b005      	add	sp, #20
 80055c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	080056b4 	.word	0x080056b4
 80055c8:	080056bc 	.word	0x080056bc

080055cc <__libc_init_array>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	2600      	movs	r6, #0
 80055d0:	4d0c      	ldr	r5, [pc, #48]	; (8005604 <__libc_init_array+0x38>)
 80055d2:	4c0d      	ldr	r4, [pc, #52]	; (8005608 <__libc_init_array+0x3c>)
 80055d4:	1b64      	subs	r4, r4, r5
 80055d6:	10a4      	asrs	r4, r4, #2
 80055d8:	42a6      	cmp	r6, r4
 80055da:	d109      	bne.n	80055f0 <__libc_init_array+0x24>
 80055dc:	2600      	movs	r6, #0
 80055de:	f000 f821 	bl	8005624 <_init>
 80055e2:	4d0a      	ldr	r5, [pc, #40]	; (800560c <__libc_init_array+0x40>)
 80055e4:	4c0a      	ldr	r4, [pc, #40]	; (8005610 <__libc_init_array+0x44>)
 80055e6:	1b64      	subs	r4, r4, r5
 80055e8:	10a4      	asrs	r4, r4, #2
 80055ea:	42a6      	cmp	r6, r4
 80055ec:	d105      	bne.n	80055fa <__libc_init_array+0x2e>
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	00b3      	lsls	r3, r6, #2
 80055f2:	58eb      	ldr	r3, [r5, r3]
 80055f4:	4798      	blx	r3
 80055f6:	3601      	adds	r6, #1
 80055f8:	e7ee      	b.n	80055d8 <__libc_init_array+0xc>
 80055fa:	00b3      	lsls	r3, r6, #2
 80055fc:	58eb      	ldr	r3, [r5, r3]
 80055fe:	4798      	blx	r3
 8005600:	3601      	adds	r6, #1
 8005602:	e7f2      	b.n	80055ea <__libc_init_array+0x1e>
 8005604:	080056c4 	.word	0x080056c4
 8005608:	080056c4 	.word	0x080056c4
 800560c:	080056c4 	.word	0x080056c4
 8005610:	080056c8 	.word	0x080056c8

08005614 <memset>:
 8005614:	0003      	movs	r3, r0
 8005616:	1882      	adds	r2, r0, r2
 8005618:	4293      	cmp	r3, r2
 800561a:	d100      	bne.n	800561e <memset+0xa>
 800561c:	4770      	bx	lr
 800561e:	7019      	strb	r1, [r3, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	e7f9      	b.n	8005618 <memset+0x4>

08005624 <_init>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562a:	bc08      	pop	{r3}
 800562c:	469e      	mov	lr, r3
 800562e:	4770      	bx	lr

08005630 <_fini>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005636:	bc08      	pop	{r3}
 8005638:	469e      	mov	lr, r3
 800563a:	4770      	bx	lr
